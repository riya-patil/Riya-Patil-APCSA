{
  
    
        "post0": {
            "title": "Pop Quiz",
            "content": "import java.util.UUID; import java.time.LocalDateTime; public class Book{ private static ArrayList&lt;Book&gt; library = new ArrayList&lt;Book&gt;(); private String title; private UUID id; private static int bookCount = 0; private LocalDateTime enteredLib; public Book(String bookTitle){ this.title = bookTitle; id = UUID.randomUUID(); bookCount++; } public UUID getId() { return id; } public String toString(){ return &quot;Book title: &quot; + title + &quot;; id: &quot; + id; } /* public int getBookCount(){ return bookCount += 1; }*/ public static int getBookCount(){ return bookCount; } public static void main(String[] args){ Book book = new Book(&quot;The Book Thief&quot;); Book book2 = new Book(&quot;The Midnight Library&quot;); System.out.println(book); System.out.println(book2); System.out.println(&quot;Book Count: &quot; + Book.getBookCount()); } } Book.main(null); . Book title: The Book Thief; id: 3d90eaaa-3033-427b-81d8-1f5bec3f876d Book title: The Midnight Library; id: 32d37f07-60aa-4b4b-9bbf-044269ba7d16 Book Count: 6 . public class Novel extends Book{ public String author; private int enteredLib; private String bookTitle; public Novel(String bookTitle, String author,int enteredLib){ super(bookTitle); this.author = author; this.enteredLib = enteredLib; } public void setTitle(String bookTitle) { this.bookTitle = bookTitle; } public String getTitle() { return bookTitle; } public String getAuthor() { return author; } public int getEnteredLib() { return enteredLib; } public void setEnteredLib(int enteredLib) { this.enteredLib = enteredLib; } public static void main(String[] args) { Novel novel = new Novel(&quot;This Book&quot;, &quot;Author&quot;, 12); System.out.println(&quot;Novel title: &quot; + novel.getTitle()); System.out.println(&quot;Novel author: &quot; + novel.getAuthor()); System.out.println(&quot;Novel time: &quot; + novel.getEnteredLib()); } } Novel.main(null); . Novel title: null Novel author: Author Novel time: 12 . public class Textbook extends Book{ public String pCompany; private int enteredLib; private String textbookTitle; public Textbook(String textbookTitle, String pCompany,int enteredLib){ super(textbookTitle); this.pCompany = pCompany; this.enteredLib = enteredLib; } public String getCompany() { return pCompany; } public void setCompany(String pCompany) { this.pCompany = pCompany; } public void setTitle(String textbookTitle) { this.textbookTitle = textbookTitle; } public String getTitle() { return textbookTitle; } public int getEnteredLib() { return enteredLib; } public void setEnteredLib(int enteredLib) { this.enteredLib = enteredLib; } public static void main(String[] args) { Textbook textbook = new Textbook(&quot;This Textbook&quot;, &quot;Company&quot;, 15); System.out.println(&quot;Textbook title: &quot; + textbook.getTitle()); System.out.println(&quot;Textbook author: &quot; + textbook.getCompany()); System.out.println(&quot;Textbook time: &quot; + textbook.getEnteredLib()); } } Textbook.main(null); . Textbook title: null Textbook author: Company Textbook time: 15 .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2023/04/20/popquiz.html",
            "relUrl": "/2023/04/20/popquiz.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "ArrayList",
            "content": "ArrayList Definition . An ArrayList is like an array that has more flexibility, so it can be resized and things can be added and removed after the array is created. No size limit, and it can have duplicate elements. . import java.util.ArrayList; ArrayList&lt;String&gt; words = new ArrayList&lt;String&gt;(); words.add(&quot;Riya&quot;); words.add(&quot;and&quot;); words.add(&quot;Vidhi&quot;); words.add(&quot;are&quot;); words.add(&quot;cool&quot;); System.out.println(words); . [Riya, and, Vidhi, are, cool] . Add and addAll . Adding elements using add(). Can also be added at a certain index if specified. addAll() is used to add all the elements from one array to another. . words.add(&quot;!&quot;); //adds the ! to the end of the arraylist words.add(4, &quot;very&quot;); //adds the word very to the list at index 4 System.out.println(words); . [Riya, and, Vidhi, are, very, cool, !] . ArrayList&lt;String&gt; morewords = new ArrayList&lt;String&gt;(); morewords.add(&quot;Riya&quot;); morewords.add(&quot;is&quot;); morewords.add(&quot;cooler&quot;); morewords.add(&quot;than&quot;); morewords.add(&quot;Vidhi&quot;); //this is very true words.addAll(morewords); //adds the second list to the first one System.out.println(words); . [Riya, and, Vidhi, are, very, cool, !, Riya, is, cooler, than, Vidhi] . Size . This returns the size of the list by using size(). . words.size(); //this is the new list words after using addAll() . 12 . Clear . The clear method uses clear() to remove all the existing elements in a list. . words.clear(); //clears all the elements in list System.out.println(words); //they&#39;re all gone, how sad . [] . Remove (int index) and (element) . This method remove(), removes an element from the index, it shifts the other elements and decreases index by the amount of elements removed. Can be used by removing the index number or the name of the element. . words.remove(3); //you can see that the word &quot;are&quot; has been removed System.out.println(words); . [Riya, and, Vidhi, very, cool, !, Riya, is, cooler, than, Vidhi] . words.remove(&quot;cooler&quot;); words.remove(&quot;than&quot;); System.out.println(words); . [Riya, and, Vidhi, are, very, cool, !, Riya, is, Vidhi] . Get . The get() method returns elements at the specific index. . words.get(5); . cool . Set . The set() method replaces an element at an index with another element . words.set(3, new String(&quot;lol&quot;)); System.out.println(words); . [Riya, and, Vidhi, lol, very, cool, !, Riya, is, cooler, than, Vidhi] . IndexOf . The indexOf() method returns when the element occurs first or -1 if its not there. . words.indexOf(&quot;csa&quot;); . -1 . lastIndexOf(element) . This method returns the index of when the element comes up last, or -1 if its not in the list. . words.lastIndexOf(&quot;Riya&quot;); . 7 . equals(element) . This compares equality of element with the ones in the list. . words.equals(&quot;hello&quot;); . false . hashCode() . Returns the hashcode value of a list, a hashcode is an integer value that corresponds with an object. . words.hashCode(); . -1141836386 . isEmpty . This method checks if the list is empty or not, and returns true or false if it is empty or not respectively. . words.isEmpty(); . false . morewords.isEmpty(); . false . contains(element) . This checks if the list has a certain element, true if it does and false if it doesn&#39;t. . words.contains(&quot;Vidhi&quot;); . true . words.contains(&quot;hello&quot;); . false . Sort . This method sorts the elements of a list based on a comparator. . import java.util.Collections; System.out.println(&quot;List : &quot;+words); //will sort the string according to alphabetical order Collections.sort(words); System.out.println(&quot;Sorted List : &quot;+words); . List : [Riya, and, Vidhi, lol, very, cool, !, Riya, is, cooler, than, Vidhi] Sorted List : [!, Riya, Riya, Vidhi, Vidhi, and, cool, cooler, is, lol, than, very] .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/learning/2023/04/20/.arraylist.html",
            "relUrl": "/fastpages/learning/2023/04/20/.arraylist.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": " Mc Test Corrections",
            "content": "Time taken total: 3 hours . I was at question 34 when 1.5 hours was over . Overall Score: 52/66 . I think I did pretty well on this test, however I had to guess on a lot of the questions. And I ended up guessing right on a lot of them but wrong on a lot more of them. I also think I got a little lazy near the end, since lots of my mistakes were found there. . Weak areas of mine are definitely 2D arrays, looking at long paragraphs of code, and time management. I think since last time I improved a little on loops, but I also still need to work on that area as well. . Question My Answer Right Answer . 1 | B. I chose this because I thought code segment 1 would work, but it actually doesn’t | E. the real answer is that none of the code segments work for many different reasons. It actually increases each by 1. | . 8 | B. This one was a silly mistake and I misread the question when I was answering, and thought that they would evaluate to the same | D. The real answer is that they will evaluate to the same false value when they have different values and different when A and B are the same truth value | . 16 | A. I chose this answer because I thought that changing the col to be less than arr.length would be the answer and had to decide between 2 | C. The reason why it needed to include a : is because it is intended to assign a row of col but col is not a 2D array | . 21 | A. The private variable is actually allowed to be accessed because it uses a public constructor and method which can be called | E. The real answer is this because the reset method returns a void type so it can’t have a value | . 34 | E. I chose this but it was wrong because it will create an out of bounds exception because it tries to access an array value at its end index | D. This is the correct answer because the index k varies from 0 to arr.length -1, twice the value of arr[k] and outputs the same code sum | . 39 | B. This is wrong because the value 1984 is a multiple of 4, and not a multiple of 100, so the expression (val % 4) == 0 evaluates to true and the method returns true, as intended | A. This is the right answer because this is an error because even though 1900 is a multiple of 100, it is not a multiple of 400, so the method should have returned false | . 42 | C. This is wrong because the reverse of nnoo is oonn and the strings are not equal | E. This is correct because it’s a palindrome | . 48 | B. This is wrong because it outputs the wrong values, even though it’s the same amount | E. This option is correct because it outputs the same values and can also be printed using a for loop with var k | . 49 | B. This is wrong because “W” is not printed because the expression a &gt; 0 evaluates to false. In option III, both a &lt; b and a &gt; 0 evaluate to true, so “W” is printed. | C. This is correct because option 1 and 2 wont print out W due to the a&gt;0 so it won’t evaluate to true and W will not be printed. | . 60 | B. This is wrong because the first element of the returned array might not have the correct value. | C. This option is correct because the last element of the array with the length of the result minus 1 might be the wrong value | . 61 | A. This is wrong because the TennisPlayer class implements the Student interface, a variable of type Student can reference an object of type TennisPlayer. | D. I got this wrong because I didn’t know what interface meant, but the Athlete class doesn’t implement the student interface | . 62 | B. This is wrong because this set of values does not test the conditions when x is even and y is assigned the value 3. | C. This is correct for the first conditional tests to see if x is even, if it is, y will be assigned the value 3. | . 65 | C. This is wrong because it doesn’t have the correct value return for the classify method | E. This value is correct because when it is plugged back into the method it returns the value of carClass | . 66 | D. The given code segment prints 13579. This code segment prints nothing because the condition in the for loop is initially false | B. The correct way is that in this while loop, j is initially 1 and increases by 2 repeatedly while it is less than 10. | .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2023/04/20/MC-Test-Corrections.html",
            "relUrl": "/2023/04/20/MC-Test-Corrections.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Checkpoint 3",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Collectable implements Comparable &lt;Collectable&gt; { public final String masterType = &quot;Collectable&quot;; private String type; // extender should define their data type // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // this method is used to compare toString of objects public int compareTo(Collectable obj) { return this.toString().compareTo(obj.toString()); } // static print method used by extended classes public static void print(Collectable[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Collectable&#39; properties if (objs.length &gt; 0) { Collectable obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Collectable: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /* * Animal class extends Collectable and defines abstract methods */ public class Animal extends Collectable { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Collectable&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* Getters * */ public String getName() { return this.name; } public int getAge() { return this.age; } public String getColor() { return this.color; } /* &#39;Collectable&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // convert to Coolection and sort in name order Animal.setOrder(KeyType.name); List&lt;Animal&gt; animals = new ArrayList&lt;Animal&gt;(Arrays.asList(objs)); // Array has asList conversion Collections.sort(animals); Animal.setOrder(KeyType.title); for (Animal animal : animals) System.out.println(animal); } } Animal.main(null); . class [LREPL.$JShell$13$Animal; 6 Collectable: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 Animal: Cat, Black, 10 Animal: Dog, Brown, 14 Animal: Kitty, Calico, 1 Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 . import java.util.HashMap; public class Pets { // create a new HashMap HashMap&lt;String, Animal&gt; names = new HashMap&lt;&gt;(); /* Add Pets * */ public Pets() { // add some key-value pairs to the HashMap names.put(&quot;Leo&quot;, new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;)); names.put(&quot;Porky&quot;, new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;)); names.put(&quot;Ro-Ro&quot;, new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;)); names.put(&quot;Midnight&quot;, new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;)); names.put(&quot;Hobbes&quot;, new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;)); names.put(&quot;Duke&quot;, new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;)); } /* Remove Pet * */ public Animal remove(String key) { // check if a key exists in the HashMap then remove Animal animal = null; if (names.containsKey(key)) { animal = names.get(key); names.remove(key); } return animal; } /* Print Pets * */ public void print() { // iterate over the keys in the HashMap for (String name: names.keySet()) { Animal obj = names.get(name); System.out.println(name + &quot; is a &quot; + obj.getColor() + &quot; &quot; + obj.getName() + &quot; and is &quot; + obj.getAge() + &quot; years old.&quot;); } System.out.println(); } /* Tester Method * */ public static void main(String[] args) { // intialize Pets Pets pets = new Pets(); pets.print(); // remove Pet String key = &quot;Hobbes&quot;; Animal animal = pets.remove(&quot;Hobbes&quot;); if (animal == null) { System.out.println(key + &quot; not found&quot;); } else { System.out.println(&quot;Removed: &quot; + key + &quot;, &quot; + animal); } pets.print(); } } Pets.main(null); . | | | public class Pets { | // create a new HashMap | HashMap&lt;String, Animal&gt; names = new HashMap&lt;&gt;(); | | /* Add Pets | * | */ | public Pets() { | // add some key-value pairs to the HashMap | names.put(&#34;Leo&#34;, new Animal(&#34;Lion&#34;, 8, &#34;Gold&#34;)); | names.put(&#34;Porky&#34;, new Animal(&#34;Pig&#34;, 3, &#34;Pink&#34;)); | names.put(&#34;Ro-Ro&#34;, new Animal(&#34;Robin&#34;, 7, &#34;Red&#34;)); | names.put(&#34;Midnight&#34;, new Animal(&#34;Cat&#34;, 10, &#34;Black&#34;)); | names.put(&#34;Hobbes&#34;, new Animal(&#34;Kitty&#34;, 1, &#34;Calico&#34;)); | names.put(&#34;Duke&#34;, new Animal(&#34;Dog&#34;, 14, &#34;Brown&#34;)); | } | | /* Remove Pet | * | */ | public Animal remove(String key) { | // check if a key exists in the HashMap then remove | Animal animal = null; | if (names.containsKey(key)) { | animal = names.get(key); | names.remove(key); | } | return animal; | } | | /* Print Pets | * | */ | public void print() { | // iterate over the keys in the HashMap | for (String name: names.keySet()) { | Animal obj = names.get(name); | System.out.println(name + &#34; is a &#34; + obj.getColor() + &#34; &#34; + obj.getName() + &#34; and is &#34; + obj.getAge() + &#34; years old.&#34;); | } | System.out.println(); | } | | /* Tester Method | * | */ | public static void main(String[] args) { | | // intialize Pets | Pets pets = new Pets(); | pets.print(); | | // remove Pet | String key = &#34;Hobbes&#34;; | Animal animal = pets.remove(&#34;Hobbes&#34;); | if (animal == null) { | System.out.println(key + &#34; not found&#34;); | } else { | System.out.println(&#34;Removed: &#34; + key + &#34;, &#34; + animal); | } | pets.print(); | | } | } Unresolved dependencies: - class Animal . import java.util.HashSet; import java.util.Set; public class AnimalSet { public static void main(String[] args) { // create a new HashSet Set&lt;String&gt; animals = new HashSet&lt;&gt;(); // add some elements to the Set animals.add(&quot;lion&quot;); animals.add(&quot;dog&quot;); animals.add(&quot;cat&quot;); // print out the Set System.out.println(animals); // check if an element is in the Set boolean hasLion = animals.contains(&quot;lion&quot;); System.out.println(&quot;Has lion: &quot; + hasLion); // remove an element from the Set animals.remove(&quot;lion&quot;); System.out.println(&quot;Removed lion&quot;); // print out the Set System.out.println(animals); // add duplicate System.out.println(&quot;add duplicate dog&quot;); animals.add(&quot;dog&quot;); // no action System.out.println(animals); // add duplicate System.out.println(&quot;add pig&quot;); animals.add(&quot;pig&quot;); System.out.println(animals); // using forEach() method with a lambda expression animals.forEach(animal -&gt; { String message = &quot;I &quot;; message += animal.equals(&quot;dog&quot;) ? &quot;like&quot; : &quot;don&#39;t like&quot;; message += &quot; &quot; + animal + &quot;s &quot; + &quot;for pets&quot;; System.out.println(message); }); } } AnimalSet.main(null); . [cat, dog, lion] Has lion: true Removed lion [cat, dog] add duplicate dog [cat, dog] add pig [cat, dog, pig] I don&#39;t like cats for pets I like dogs for pets I don&#39;t like pigs for pets . Hacks . Bubble Sort . simple sorting algorithm that swaps adjacent elements if they are in the wrong order | runs through the list of elements to be sorted multiple times until the entire list is sorted | the worst-case time complexity of bubble sort is O(n^2), where n is the number of elements in the list. This means that as the size of the list increases, the time it takes to sort the list is exponential. This makes bubble sort inefficient for large lists. | The best-case time complexity of bubble sort is O(n), which occurs when the list is already sorted. In this case, the algorithm only needs to pass through the list once to verify that it is sorted. | . public class BubbleSort { public static void main(String[] args) { // Create a new list of 5000 integers int[] list = new int[5000]; // Fill the list with random integers between 0 and 4999 for (int i = 0; i &lt; list.length; i++) { list[i] = (int) (Math.random() * 5000); } // Display the unsorted list System.out.println(&quot;Not Sorted quiz results:&quot;); for (int i = 0; i &lt; list.length; i++) { System.out.print(list[i] + &quot; &quot;); } System.out.println(&quot;&quot;); // Measure the starting time of the bubble sort algorithm long startTime = System.nanoTime(); // Initialize counters for comparisons and swaps int comparisons = 0; int swaps = 0; // Implement the bubble sort algorithm to sort the list for (int i = 0; i &lt; list.length; i++) { for (int j = 1; j &lt; (list.length - i); j++) { comparisons++; // Count each comparison made if (list[j - 1] &gt; list[j]) { swaps++; // Count each swap made int temp = list[j-1]; list[j-1] = list[j]; list[j] = temp; } } } // Display the sorted list System.out.println(&quot;Sorted quiz results:&quot;); for (int i = 0; i &lt; list.length; i++) { System.out.print(list[i] + &quot; &quot;); } System.out.println(&quot;&quot;); // Measure the ending time of the bubble sort algorithm long endTime = System.nanoTime(); // Calculate the total time taken to sort the list long totalTime = endTime - startTime; // Display the total time taken to sort the list, as well as the number of comparisons and swaps made System.out.println(&quot;Time: &quot;); System.out.println(totalTime + &quot; nano seconds&quot;); System.out.println(&quot;Comparisons: &quot;); System.out.println(comparisons); System.out.println(&quot;Swaps: &quot;); System.out.println(swaps); } } BubbleSort.main(null); . Not Sorted quiz resultsorted quiz resultsime: 188513022 nano seconds Comparisons: 12497500 Swaps: 6291202 . Insertion Sort . sorting algorithm that works by repeatedly inserting elements into a sorted portion of the list | the algorithm starts by assuming that the first element in the list is sorted, then compares each following to the ones that are already sorted and inserts it into the correct place | compare the second element with the first element. If the second element is smaller, swap them. | compare the third element with the first two elements. If the third element is smaller than the second element, swap them. If the third element is smaller than the first element, swap them, continue | worst-case time complexity of insertion sort is O(n^2), where n is the number of elements in the list. This occurs when the list is in reverse order, and time it takes to sort is exponential | best-case time complexity of insertion sort is O(n), when list is already sorted | better than bubble but still inefficient for large lists | . public class InsertionSort{ public static void main(String[] args){ int[] list = new int[5000]; // Fill the list with random integers between 0 and 4999 for (int i = 0; i &lt; list.length; i++) { list[i] = (int) (Math.random() * 5000); } // Display the unsorted list System.out.println(&quot;Unsorted question options:&quot;); for(int i = 0; i &lt; list.length; i++){ System.out.print(list[i] + &quot; &quot;); } System.out.println(&quot;&quot;); // Measure the starting time of the insertion sort algorithm long startTime = System.nanoTime(); // Initialize counters for comparisons and swaps int comparisons = 0; int swaps = 0; // Implement the insertion sort algorithm to sort the list for (int i = 1; i &lt; list.length; i++){ int tmp = list[i]; int j = i - 1; while (j &gt;= 0 &amp;&amp; list[j] &gt; tmp){ comparisons++; // Count each comparison made list[j + 1] = list[j]; swaps++; // Count each swap made j = j - 1; } list[j + 1] = tmp; } // Display the sorted list System.out.println(&quot;Sorted question numbers:&quot;); for(int i = 0; i &lt; list.length; i++){ System.out.print(list[i] + &quot; &quot;); } // Measure the ending time of the insertion sort algorithm long endTime = System.nanoTime(); // Calculate the total time taken to sort the list long totalTime = endTime - startTime; // Display the total time taken to sort the list, as well as the number of comparisons and swaps made System.out.println(&quot;&quot;); System.out.println(&quot;Runtime: &quot;); System.out.println(totalTime + &quot; nanoseconds&quot;); System.out.println(&quot;Comparisons: &quot;); System.out.println(comparisons); System.out.println(&quot;Swaps: &quot;); System.out.println(swaps); } } InsertionSort.main(null); . Unsorted question optionsorted question numbersuntime: 2133342335 nanoseconds Comparisons: 6139134 Swaps: 6139134 . Selection Sort . simple sorting algorithm that works by repeatedly selecting the smallest element from the unsorted part of the list and moving to start | divides the list into two parts: the sorted part at the beginning of the list, and the unsorted part at the end of the list | repeatedly selects the smallest element from the unsorted part of the list and swaps it with the first element in the unsorted part of the list | worst-case time complexity of selection sort is O(n^2), where n is the number of elements in the list. This occurs when the list is in reverse order, so it must scan the remaining unsorted part of the list to find the smallest element, which takes O(n) time, and it repeats this for n iterations, which gets n^2 | best-case time complexity of selection sort is also O(n^2), algorithm still needs to scan the entire unsorted part of the list to find the smallest element | selection sort is less efficient than insertion sort and merge sort for large lists because of its O(n^2) time complexity | . public class SelectionSort{ public static void main(String[] args){ int[] list = new int[5000]; // Fill the list with random integers between 0 and 4999 for (int i = 0; i &lt; list.length; i++) { list[i] = (int) (Math.random() * 5000); } System.out.println(&quot;List of quiz results unsorted:&quot;); for(int i = 0; i &lt; list.length; i++){ System.out.print(list[i] + &quot; &quot;); } System.out.println(&quot;&quot;); // Measure the starting time of the selection sort algorithm long startTime = System.nanoTime(); // Initialize counters for comparisons and swaps int comparisons = 0; int swaps = 0; // Implement the selection sort algorithm to sort the list for (int i = 0; i &lt; list.length - 1; i++){ // iterates over each element of the list, except for the last one //because the last element will already be in the correct place after //the other elements have been sorted int index = i; for (int j = i + 1; j &lt; list.length; j++){ //the inner loop searches the remaining unsorted part of the list to find the smallest element comparisons++; // Count each comparison made if (list[j] &lt; list[index]){ index = j; } } int tmp = list[index]; list[index] = list[i]; list[i] = tmp; swaps++; // Count each swap made } // Display the sorted list System.out.println(&quot;Sorted quiz results:&quot;); for(int i = 0; i &lt; list.length; i++){ System.out.print(list[i] + &quot; &quot;); } // Measure the ending time of the selection sort algorithm long endTime = System.nanoTime(); // Calculate the total time taken to sort the list long totalTime = endTime - startTime; // Display the total time taken to sort the list, as well as the number of comparisons and swaps made System.out.println(&quot;&quot;); System.out.println(&quot;Runtime: &quot;); System.out.println(totalTime + &quot; nanoseconds&quot;); System.out.println(&quot;Comparisons: &quot;); System.out.println(comparisons); System.out.println(&quot;Swaps: &quot;); System.out.println(swaps); } } SelectionSort.main(null); . List of quiz results unsortedorted quiz resultsuntime: 328790004 nanoseconds Comparisons: 12497500 Swaps: 4999 . Merge Sort . works by dividing the list into smaller lists, sort through iteration, and then merging the sorted lists back together | divides the list in half until each list contains only one element, and then merges the lists back together in sorted order. | divide the list into two halves, recursively sort each half, merge the two sorted halves back together | worst-case time complexity of merge sort is O(n log n), where n is the number of elements in the list, so it needs log n levels of division, has a total of n comparisons and n swaps, which results in n log n comparisons and swaps | best-case time complexity of merge sort is also O(n log n), which occurs when the list is already sorted, still needs to divide the list into halves, but it can merge the sorted halves back together without any comparisons or swaps | . Merge sort is the most efficient out of selection sort, bubble sort, and insertion sort for large lists because of its O(n log n) time complexity. However, it requires additional memory to store the sub-lists during the sorting process, which can be a disadvantage for very large lists that cannot fit into memory. . public class MergeSort{ public static void mergeSort(int[] list, int n) { // Base case: if the list has fewer than 2 elements, it is already sorted if (n &lt; 2) { return; } // Divide the list into two halves int midVal = n / 2; int[] l = new int[midVal]; int[] r = new int[n - midVal]; // Copy the left half of the list into a new array l for (int i = 0; i &lt; midVal; i++) { l[i] = list[i]; } // Copy the right half of the list into a new array r for (int i = midVal; i &lt; n; i++) { r[i - midVal] = list[i]; } // Recursively sort each half of the list mergeSort(l, midVal); mergeSort(r, n - midVal); // Merge the sorted halves back together merge(list, l, r, midVal, n - midVal); } public static void merge( int[] list, int[] l, int[] r, int left, int right) { // Initialize counters for swaps and comparisons int swaps = 0; int comparisons = 0; int i = 0, j = 0, k = 0; while (i &lt; left &amp;&amp; j &lt; right) { comparisons++; // Count each comparison made if (l[i] &lt;= r[j]) { list[k++] = l[i++]; } else { list[k++] = r[j++]; } swaps++; // Count each swap made } while (i &lt; left) { list[k++] = l[i++]; swaps++; // Count each swap made } while (j &lt; right) { list[k++] = r[j++]; swaps++; // Count each swap made } // Display the number of swaps and comparisons made System.out.println(&quot;Swaps: &quot; + swaps); System.out.println(&quot;Comparisons: &quot; + comparisons); } public static void main(String[] args){ int[] list = new int[5000]; for (int i = 0; i &lt; list.length; i++) { list[i] = (int) (Math.random() * 10000); } System.out.println(&quot;Unsorted quiz questions:&quot;); for(int i = 0; i &lt; list.length; i++){ System.out.print(list[i] + &quot; &quot;); } System.out.println(&quot; &quot;); long startTime = System.nanoTime(); // Sort the list using the merge sort algorithm mergeSort(list, list.length); // Display the sorted list System.out.println(&quot;Sorted questions:&quot;); for(int i = 0; i &lt; list.length; i++){ System.out.print(list[i] + &quot; &quot;); } long endTime = System.nanoTime(); long totalTime = endTime - startTime; // Display the total time taken to sort the list System.out.println(&quot;&quot;); System.out.println(&quot;Runtime: &quot;); System.out.println(totalTime + &quot; nanoseconds&quot;); } } MergeSort.main(null); . Unsorted quiz questionswaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 5 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 75 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 74 Swaps: 156 Comparisons: 153 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 75 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 16 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 155 Swaps: 312 Comparisons: 310 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 15 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 33 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 6 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 75 Swaps: 156 Comparisons: 154 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 16 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 76 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 40 Comparisons: 39 Swaps: 79 Comparisons: 77 Swaps: 157 Comparisons: 153 Swaps: 313 Comparisons: 312 Swaps: 625 Comparisons: 623 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 16 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 154 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 15 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 15 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 76 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 154 Swaps: 312 Comparisons: 309 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 5 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 13 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 34 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 153 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 36 Swaps: 78 Comparisons: 76 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 6 Swaps: 20 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 40 Comparisons: 39 Swaps: 79 Comparisons: 78 Swaps: 157 Comparisons: 156 Swaps: 313 Comparisons: 308 Swaps: 625 Comparisons: 624 Swaps: 1250 Comparisons: 1249 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 5 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 6 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 36 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 16 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 6 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 153 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 15 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 35 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 35 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 36 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 35 Swaps: 78 Comparisons: 75 Swaps: 156 Comparisons: 155 Swaps: 312 Comparisons: 310 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 16 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 75 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 9 Comparisons: 5 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 36 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 75 Swaps: 156 Comparisons: 149 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 76 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 34 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 40 Comparisons: 39 Swaps: 79 Comparisons: 78 Swaps: 157 Comparisons: 153 Swaps: 313 Comparisons: 312 Swaps: 625 Comparisons: 623 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 76 Swaps: 156 Comparisons: 153 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 5 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 15 Swaps: 39 Comparisons: 36 Swaps: 78 Comparisons: 76 Swaps: 156 Comparisons: 155 Swaps: 312 Comparisons: 309 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 74 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 12 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 35 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 35 Swaps: 78 Comparisons: 72 Swaps: 156 Comparisons: 154 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 76 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 40 Comparisons: 39 Swaps: 79 Comparisons: 77 Swaps: 157 Comparisons: 155 Swaps: 313 Comparisons: 312 Swaps: 625 Comparisons: 624 Swaps: 1250 Comparisons: 1247 Swaps: 2500 Comparisons: 2497 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 155 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 15 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 15 Swaps: 39 Comparisons: 35 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 16 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 155 Swaps: 312 Comparisons: 311 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 154 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 36 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 15 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 74 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 6 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 40 Comparisons: 35 Swaps: 79 Comparisons: 77 Swaps: 157 Comparisons: 156 Swaps: 313 Comparisons: 312 Swaps: 625 Comparisons: 622 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 35 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 5 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 36 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 76 Swaps: 156 Comparisons: 155 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 15 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 73 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 11 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 6 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 75 Swaps: 156 Comparisons: 152 Swaps: 312 Comparisons: 311 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 16 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 35 Swaps: 78 Comparisons: 76 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 31 Swaps: 78 Comparisons: 75 Swaps: 156 Comparisons: 155 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 15 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 36 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 36 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 18 Swaps: 40 Comparisons: 38 Swaps: 79 Comparisons: 75 Swaps: 157 Comparisons: 155 Swaps: 313 Comparisons: 311 Swaps: 625 Comparisons: 624 Swaps: 1250 Comparisons: 1246 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 6 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 35 Swaps: 78 Comparisons: 75 Swaps: 156 Comparisons: 154 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 15 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 15 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 36 Swaps: 78 Comparisons: 75 Swaps: 156 Comparisons: 155 Swaps: 312 Comparisons: 309 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 155 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 76 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 14 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 19 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 40 Comparisons: 39 Swaps: 79 Comparisons: 78 Swaps: 157 Comparisons: 154 Swaps: 313 Comparisons: 311 Swaps: 625 Comparisons: 624 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 33 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 16 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 15 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 155 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 17 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 76 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 2 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 17 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 19 Comparisons: 16 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 75 Swaps: 156 Comparisons: 155 Swaps: 312 Comparisons: 310 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 36 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 9 Comparisons: 6 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 78 Comparisons: 77 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 5 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 5 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 34 Swaps: 78 Comparisons: 77 Swaps: 156 Comparisons: 155 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 9 Swaps: 20 Comparisons: 18 Swaps: 39 Comparisons: 37 Swaps: 78 Comparisons: 76 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 4 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 9 Comparisons: 7 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 19 Comparisons: 18 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 7 Swaps: 20 Comparisons: 19 Swaps: 39 Comparisons: 38 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 2 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 19 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 4 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 9 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 2 Swaps: 5 Comparisons: 3 Swaps: 2 Comparisons: 1 Swaps: 2 Comparisons: 1 Swaps: 3 Comparisons: 1 Swaps: 5 Comparisons: 4 Swaps: 10 Comparisons: 8 Swaps: 20 Comparisons: 15 Swaps: 40 Comparisons: 39 Swaps: 79 Comparisons: 78 Swaps: 157 Comparisons: 156 Swaps: 313 Comparisons: 311 Swaps: 625 Comparisons: 623 Swaps: 1250 Comparisons: 1249 Swaps: 2500 Comparisons: 2499 Swaps: 5000 Comparisons: 4995 Sorted questions: 2 2 3 3 4 4 6 6 8 9 9 10 13 13 14 20 24 26 27 28 30 32 32 32 38 39 40 42 44 47 47 49 52 55 57 59 61 61 63 65 65 67 67 67 69 73 74 74 75 79 80 80 81 82 82 85 86 89 95 95 99 100 104 108 109 110 111 111 113 120 120 122 123 124 126 127 130 130 132 133 134 136 138 138 142 143 144 147 152 154 154 155 157 158 160 161 161 166 169 172 173 173 174 177 180 180 181 181 182 184 186 188 188 194 195 195 197 197 201 201 202 202 203 205 207 208 209 210 211 220 223 225 228 229 230 230 233 236 239 241 243 246 246 246 250 253 255 262 264 265 267 267 270 270 271 274 275 275 276 276 276 279 280 280 285 285 288 289 290 290 292 293 294 295 295 300 302 304 306 308 310 313 315 315 316 317 319 320 322 325 325 328 328 328 332 333 335 335 336 339 341 343 344 344 345 346 347 348 349 351 351 354 359 360 361 362 365 366 371 373 379 383 385 385 385 386 388 388 390 390 392 397 398 399 404 407 407 411 414 415 418 420 421 421 422 424 426 426 427 429 433 434 437 437 439 441 448 451 452 452 452 454 459 460 463 463 463 466 467 473 473 474 478 480 480 481 485 485 487 487 488 496 500 501 501 501 501 502 507 510 510 512 515 516 519 519 521 526 527 532 538 538 540 541 542 543 547 551 554 554 554 555 559 562 563 582 585 589 589 590 592 594 597 597 598 598 601 602 603 603 604 604 609 612 615 621 625 629 630 634 634 636 638 638 638 638 640 642 644 645 647 649 652 655 661 666 666 667 674 674 675 675 676 681 681 686 686 689 693 696 696 697 697 703 705 707 708 708 709 715 716 718 720 722 722 726 726 726 726 735 736 737 737 742 743 743 745 746 747 752 754 760 760 766 767 770 770 771 774 774 776 777 779 779 781 784 784 786 790 791 792 797 797 799 799 799 799 811 812 822 824 826 830 838 842 843 844 845 847 849 849 852 856 856 858 860 862 864 867 871 872 873 876 876 877 880 881 883 884 885 887 889 891 892 893 897 898 899 900 903 906 907 907 908 908 909 910 912 914 915 918 921 921 922 922 923 923 924 925 926 927 927 928 930 930 935 936 936 936 938 938 939 941 941 942 943 946 947 950 952 953 953 954 955 957 958 960 961 961 962 965 965 970 981 983 983 985 986 986 988 989 994 996 997 999 1001 1004 1005 1005 1006 1007 1009 1021 1021 1022 1024 1026 1028 1029 1030 1032 1036 1037 1039 1043 1044 1047 1052 1054 1059 1059 1060 1061 1062 1063 1063 1064 1067 1067 1067 1070 1070 1071 1071 1072 1073 1074 1076 1078 1086 1086 1086 1087 1088 1093 1096 1099 1102 1103 1103 1105 1112 1113 1115 1118 1119 1122 1122 1123 1127 1130 1130 1131 1132 1137 1137 1140 1140 1141 1147 1148 1150 1151 1152 1156 1158 1160 1162 1164 1167 1168 1172 1176 1179 1179 1181 1183 1183 1185 1187 1188 1191 1194 1194 1201 1205 1207 1209 1209 1212 1213 1215 1216 1217 1219 1219 1222 1222 1224 1226 1228 1229 1230 1230 1233 1235 1238 1238 1240 1245 1245 1247 1248 1251 1252 1254 1263 1272 1273 1273 1275 1276 1279 1280 1282 1282 1284 1291 1300 1301 1302 1302 1305 1308 1309 1309 1312 1313 1314 1314 1316 1318 1321 1322 1322 1323 1327 1328 1333 1333 1333 1333 1335 1338 1338 1341 1342 1343 1345 1348 1349 1351 1352 1353 1360 1361 1363 1363 1364 1365 1367 1368 1369 1376 1379 1379 1382 1382 1386 1386 1386 1387 1390 1392 1396 1397 1399 1403 1405 1407 1409 1410 1413 1414 1415 1426 1428 1429 1432 1434 1437 1440 1441 1441 1444 1447 1447 1450 1464 1464 1465 1470 1471 1472 1474 1476 1476 1477 1480 1480 1481 1485 1488 1489 1497 1497 1498 1504 1505 1506 1509 1521 1522 1524 1525 1525 1528 1530 1532 1534 1536 1538 1539 1540 1540 1540 1546 1549 1551 1555 1555 1557 1560 1567 1567 1567 1568 1570 1570 1572 1574 1575 1581 1583 1583 1588 1588 1588 1592 1602 1604 1607 1608 1609 1611 1616 1618 1622 1625 1626 1629 1630 1630 1631 1633 1644 1645 1651 1654 1655 1655 1656 1659 1660 1662 1662 1663 1663 1664 1678 1679 1680 1683 1689 1691 1691 1695 1697 1699 1700 1701 1702 1704 1705 1707 1707 1709 1711 1717 1720 1721 1722 1724 1725 1726 1727 1730 1731 1741 1742 1742 1743 1746 1747 1752 1756 1756 1757 1758 1762 1763 1769 1772 1772 1778 1782 1782 1785 1790 1795 1796 1799 1806 1807 1808 1809 1810 1811 1811 1812 1815 1819 1823 1824 1825 1826 1832 1833 1834 1837 1840 1845 1846 1848 1849 1849 1850 1851 1851 1851 1851 1853 1856 1858 1858 1861 1862 1863 1863 1868 1870 1870 1875 1876 1876 1879 1882 1882 1884 1895 1895 1901 1903 1909 1909 1912 1914 1915 1921 1922 1924 1926 1926 1930 1931 1932 1933 1934 1941 1942 1943 1943 1946 1949 1949 1955 1955 1956 1960 1961 1961 1961 1964 1965 1968 1975 1976 1979 1979 1982 1983 1984 1989 1991 1992 1996 2001 2001 2002 2002 2005 2005 2008 2008 2009 2011 2016 2016 2024 2028 2029 2030 2030 2031 2031 2031 2031 2032 2036 2036 2053 2055 2060 2062 2064 2068 2069 2070 2072 2073 2084 2084 2085 2087 2088 2088 2089 2093 2103 2103 2104 2104 2108 2108 2111 2114 2116 2117 2117 2118 2119 2121 2121 2123 2124 2126 2130 2132 2132 2133 2135 2135 2139 2140 2143 2145 2145 2146 2146 2146 2154 2156 2162 2163 2165 2165 2169 2169 2169 2170 2172 2173 2174 2176 2181 2182 2182 2185 2188 2189 2190 2191 2193 2194 2194 2195 2197 2197 2199 2200 2200 2202 2202 2204 2204 2207 2207 2209 2218 2218 2219 2220 2221 2224 2224 2227 2227 2227 2230 2231 2231 2238 2239 2239 2239 2243 2244 2244 2250 2251 2252 2253 2253 2256 2256 2259 2260 2262 2265 2265 2266 2267 2269 2270 2271 2273 2276 2277 2280 2284 2285 2286 2287 2290 2292 2293 2294 2295 2295 2298 2300 2302 2308 2310 2311 2315 2315 2321 2321 2322 2324 2325 2326 2327 2328 2329 2329 2329 2329 2330 2333 2333 2334 2334 2337 2337 2338 2339 2345 2345 2346 2348 2348 2348 2350 2352 2356 2357 2358 2359 2362 2363 2363 2363 2364 2366 2367 2367 2368 2373 2373 2375 2376 2377 2382 2384 2384 2386 2391 2391 2392 2392 2399 2402 2403 2405 2408 2416 2416 2419 2421 2425 2425 2427 2429 2431 2434 2437 2439 2445 2446 2448 2458 2459 2461 2463 2464 2464 2465 2465 2466 2470 2470 2471 2473 2474 2474 2475 2475 2480 2482 2484 2486 2488 2490 2491 2491 2494 2494 2495 2495 2499 2500 2502 2507 2508 2511 2512 2512 2517 2520 2520 2521 2524 2525 2528 2533 2535 2536 2536 2540 2542 2542 2543 2545 2546 2547 2547 2548 2548 2548 2548 2552 2552 2555 2556 2558 2558 2560 2562 2563 2568 2573 2574 2578 2579 2580 2584 2585 2587 2590 2594 2594 2596 2597 2598 2598 2598 2609 2610 2611 2615 2616 2617 2625 2629 2629 2630 2632 2633 2635 2638 2638 2638 2640 2640 2642 2642 2642 2644 2644 2649 2650 2650 2651 2657 2657 2657 2659 2659 2660 2660 2662 2663 2663 2667 2667 2669 2677 2678 2679 2679 2681 2681 2682 2683 2687 2691 2692 2695 2696 2698 2699 2708 2710 2711 2711 2711 2713 2714 2716 2717 2720 2722 2723 2727 2730 2732 2733 2734 2740 2744 2745 2750 2750 2751 2756 2764 2765 2765 2766 2769 2771 2772 2772 2772 2772 2776 2776 2778 2787 2790 2797 2797 2798 2801 2802 2802 2811 2811 2820 2820 2822 2826 2826 2829 2829 2829 2833 2838 2841 2842 2842 2847 2849 2853 2858 2858 2858 2858 2862 2865 2870 2886 2888 2894 2894 2898 2899 2900 2900 2902 2904 2905 2907 2907 2908 2908 2909 2911 2912 2915 2917 2918 2918 2920 2920 2921 2924 2925 2928 2929 2939 2942 2944 2946 2950 2956 2956 2958 2958 2964 2965 2965 2965 2965 2968 2969 2970 2970 2971 2971 2972 2974 2982 2983 2984 2985 2987 2990 2990 2997 2998 2998 2999 3000 3003 3008 3008 3008 3011 3012 3014 3017 3020 3027 3028 3029 3029 3030 3031 3032 3033 3036 3037 3041 3046 3049 3052 3054 3058 3059 3060 3062 3064 3069 3069 3069 3070 3070 3070 3071 3074 3077 3079 3079 3082 3083 3085 3086 3087 3087 3097 3099 3101 3102 3103 3104 3107 3107 3107 3115 3115 3118 3119 3119 3122 3126 3127 3129 3131 3131 3133 3136 3138 3141 3142 3144 3145 3145 3151 3152 3156 3156 3162 3163 3164 3166 3166 3167 3167 3169 3169 3175 3178 3180 3182 3185 3185 3189 3193 3195 3198 3198 3200 3203 3208 3208 3211 3212 3214 3215 3216 3217 3220 3220 3222 3225 3226 3226 3227 3231 3232 3235 3236 3236 3239 3239 3240 3242 3243 3245 3248 3250 3251 3253 3254 3254 3262 3262 3263 3263 3271 3273 3273 3276 3278 3278 3279 3282 3283 3283 3286 3289 3289 3290 3294 3295 3300 3301 3303 3304 3309 3321 3323 3324 3325 3329 3330 3332 3333 3340 3341 3343 3350 3355 3357 3361 3366 3368 3369 3370 3370 3372 3373 3380 3385 3388 3390 3391 3393 3393 3394 3395 3398 3399 3400 3402 3404 3404 3404 3408 3408 3413 3414 3415 3417 3418 3422 3422 3432 3437 3438 3438 3439 3442 3443 3446 3447 3447 3447 3447 3450 3450 3451 3452 3455 3455 3456 3460 3462 3464 3469 3474 3477 3477 3479 3484 3484 3492 3493 3494 3497 3498 3499 3500 3500 3502 3502 3504 3504 3504 3505 3507 3511 3511 3513 3514 3519 3523 3525 3527 3528 3528 3532 3532 3534 3534 3537 3540 3545 3546 3546 3547 3549 3550 3555 3557 3558 3560 3566 3566 3572 3575 3576 3578 3580 3585 3585 3586 3587 3589 3589 3589 3590 3597 3598 3598 3599 3601 3603 3605 3609 3611 3612 3616 3617 3623 3624 3624 3626 3630 3635 3641 3643 3643 3645 3647 3656 3657 3657 3661 3661 3662 3669 3672 3674 3674 3675 3685 3687 3688 3688 3694 3697 3702 3704 3706 3707 3708 3710 3716 3730 3733 3736 3736 3743 3745 3748 3755 3756 3762 3763 3765 3767 3768 3771 3773 3776 3781 3781 3781 3784 3788 3789 3790 3791 3792 3792 3794 3795 3802 3804 3804 3805 3807 3809 3809 3811 3814 3815 3815 3818 3819 3821 3822 3823 3824 3824 3825 3833 3834 3834 3835 3836 3836 3837 3838 3842 3842 3843 3843 3844 3845 3846 3851 3851 3858 3858 3860 3860 3861 3864 3867 3867 3869 3872 3872 3873 3873 3875 3879 3881 3890 3890 3890 3892 3893 3894 3895 3896 3897 3898 3899 3899 3900 3900 3907 3909 3912 3912 3913 3913 3917 3918 3919 3920 3923 3923 3924 3926 3926 3929 3931 3932 3935 3936 3939 3943 3949 3950 3950 3951 3952 3959 3959 3961 3961 3966 3967 3968 3969 3972 3972 3975 3975 3976 3977 3978 3980 3982 3998 4001 4003 4005 4007 4007 4009 4011 4013 4015 4015 4016 4017 4019 4022 4022 4023 4023 4024 4027 4030 4031 4033 4034 4037 4037 4037 4040 4042 4044 4047 4048 4048 4050 4052 4054 4055 4057 4060 4060 4069 4069 4070 4071 4072 4076 4079 4081 4081 4083 4086 4088 4092 4096 4098 4100 4100 4102 4104 4106 4106 4107 4109 4109 4111 4111 4116 4117 4123 4130 4130 4133 4135 4135 4136 4140 4141 4147 4148 4151 4154 4155 4155 4159 4167 4168 4173 4174 4177 4179 4180 4180 4188 4189 4190 4191 4191 4191 4191 4194 4198 4198 4199 4201 4202 4208 4212 4212 4212 4214 4217 4220 4220 4221 4226 4226 4227 4230 4231 4235 4236 4237 4237 4239 4240 4242 4245 4249 4249 4250 4251 4254 4254 4257 4261 4263 4265 4267 4275 4277 4278 4281 4282 4284 4290 4291 4296 4299 4300 4303 4306 4309 4310 4310 4311 4313 4314 4314 4314 4315 4315 4318 4321 4322 4325 4328 4329 4330 4330 4331 4333 4335 4339 4340 4341 4341 4346 4348 4350 4366 4367 4369 4373 4375 4375 4375 4378 4384 4388 4388 4390 4392 4394 4398 4399 4401 4403 4404 4408 4408 4412 4416 4416 4418 4419 4419 4419 4420 4421 4421 4421 4423 4425 4430 4434 4436 4436 4439 4443 4445 4447 4448 4452 4453 4454 4458 4461 4465 4467 4467 4470 4471 4471 4471 4472 4474 4475 4475 4477 4478 4479 4481 4490 4497 4497 4497 4501 4503 4504 4505 4511 4512 4515 4518 4521 4523 4524 4526 4527 4531 4531 4536 4537 4538 4541 4543 4547 4549 4550 4553 4553 4553 4560 4562 4565 4566 4568 4569 4570 4573 4575 4577 4582 4587 4594 4597 4598 4598 4600 4601 4603 4603 4605 4605 4607 4609 4612 4612 4615 4617 4618 4619 4625 4625 4626 4626 4629 4629 4629 4630 4636 4644 4644 4644 4647 4651 4651 4652 4652 4654 4655 4656 4657 4660 4661 4662 4665 4666 4668 4669 4669 4669 4671 4672 4675 4677 4679 4680 4687 4688 4688 4690 4690 4692 4697 4698 4700 4702 4704 4705 4706 4707 4709 4710 4711 4714 4718 4721 4723 4727 4727 4730 4731 4734 4746 4749 4750 4750 4751 4757 4761 4763 4765 4768 4769 4770 4773 4776 4776 4777 4778 4780 4782 4784 4785 4790 4791 4794 4796 4798 4800 4801 4805 4806 4806 4806 4812 4812 4814 4815 4820 4822 4823 4824 4825 4830 4832 4838 4841 4842 4842 4842 4843 4845 4847 4847 4849 4850 4851 4854 4857 4858 4862 4867 4869 4870 4873 4877 4877 4883 4883 4884 4884 4885 4886 4886 4887 4888 4889 4889 4899 4904 4907 4908 4910 4913 4916 4918 4923 4923 4924 4925 4925 4931 4932 4932 4934 4936 4941 4942 4946 4947 4950 4952 4953 4953 4955 4958 4963 4963 4964 4964 4965 4966 4969 4972 4972 4975 4978 4979 4980 4983 4987 4989 4993 4996 4997 5000 5002 5004 5006 5007 5008 5009 5014 5015 5019 5022 5022 5022 5023 5025 5026 5030 5039 5041 5050 5051 5054 5054 5056 5065 5066 5068 5070 5071 5071 5073 5073 5078 5084 5085 5086 5089 5089 5092 5093 5096 5099 5101 5102 5103 5105 5107 5107 5108 5110 5111 5113 5113 5114 5115 5122 5123 5124 5124 5128 5129 5129 5129 5132 5133 5134 5138 5139 5144 5146 5146 5147 5149 5152 5154 5155 5155 5155 5158 5161 5167 5169 5170 5170 5171 5172 5176 5178 5180 5181 5181 5187 5187 5189 5190 5193 5194 5195 5195 5197 5198 5202 5209 5210 5211 5215 5218 5220 5222 5223 5225 5228 5232 5244 5247 5248 5250 5252 5252 5260 5262 5263 5263 5264 5265 5266 5269 5269 5277 5282 5285 5285 5286 5295 5295 5296 5296 5297 5299 5303 5306 5310 5313 5315 5317 5325 5326 5329 5331 5333 5335 5335 5337 5342 5344 5348 5348 5348 5350 5351 5354 5354 5359 5359 5362 5369 5370 5370 5376 5380 5380 5380 5381 5383 5383 5384 5385 5388 5393 5396 5396 5400 5403 5408 5410 5411 5413 5415 5417 5420 5420 5431 5432 5433 5435 5439 5441 5442 5444 5451 5451 5453 5453 5457 5459 5461 5471 5476 5480 5483 5484 5488 5489 5489 5491 5491 5494 5496 5499 5501 5503 5504 5505 5505 5506 5510 5516 5519 5522 5525 5526 5529 5533 5533 5534 5534 5537 5537 5537 5539 5541 5547 5549 5550 5550 5552 5553 5555 5557 5558 5558 5559 5559 5560 5561 5561 5562 5564 5566 5566 5566 5567 5567 5567 5568 5570 5575 5577 5579 5579 5586 5590 5592 5595 5595 5596 5602 5603 5603 5606 5615 5615 5621 5622 5624 5624 5625 5625 5626 5629 5634 5635 5637 5637 5640 5644 5651 5653 5655 5656 5659 5661 5663 5668 5668 5673 5673 5675 5675 5679 5681 5682 5684 5690 5691 5691 5691 5691 5695 5696 5699 5703 5709 5710 5710 5711 5712 5717 5717 5722 5726 5729 5731 5732 5732 5734 5736 5740 5740 5740 5742 5742 5751 5753 5755 5765 5768 5773 5775 5778 5779 5781 5783 5783 5789 5793 5794 5794 5794 5796 5796 5797 5799 5800 5801 5802 5807 5807 5809 5813 5814 5816 5816 5823 5828 5828 5830 5830 5833 5833 5834 5836 5839 5839 5839 5839 5845 5848 5850 5850 5852 5854 5858 5858 5858 5865 5866 5867 5871 5873 5874 5878 5879 5881 5885 5885 5886 5888 5889 5890 5896 5898 5899 5901 5901 5905 5905 5906 5910 5913 5917 5918 5924 5926 5926 5928 5930 5932 5933 5935 5936 5938 5939 5940 5948 5951 5955 5957 5957 5960 5962 5963 5963 5965 5966 5966 5968 5970 5973 5973 5974 5980 5983 5985 5986 5989 5991 5992 5993 5994 5998 5998 6002 6003 6005 6006 6009 6010 6011 6016 6019 6024 6025 6029 6032 6035 6040 6041 6044 6045 6049 6050 6050 6053 6053 6054 6057 6057 6059 6061 6062 6063 6067 6068 6071 6076 6077 6077 6079 6095 6095 6096 6097 6097 6099 6099 6108 6109 6109 6109 6110 6112 6115 6116 6116 6119 6119 6119 6122 6123 6126 6129 6129 6130 6132 6134 6135 6136 6137 6140 6142 6149 6150 6152 6152 6152 6153 6154 6155 6160 6163 6164 6164 6164 6164 6166 6166 6168 6168 6169 6170 6170 6171 6173 6174 6175 6175 6176 6176 6177 6179 6191 6194 6195 6202 6210 6210 6212 6212 6216 6218 6219 6220 6222 6226 6228 6228 6230 6230 6230 6233 6234 6237 6239 6241 6245 6245 6246 6246 6249 6249 6250 6250 6250 6254 6255 6256 6261 6263 6263 6270 6270 6274 6274 6285 6286 6287 6288 6289 6289 6293 6295 6299 6301 6303 6306 6311 6313 6320 6320 6321 6321 6322 6325 6326 6326 6332 6336 6337 6337 6338 6341 6342 6347 6352 6356 6356 6357 6358 6358 6359 6359 6363 6366 6370 6372 6373 6373 6377 6378 6384 6388 6388 6390 6393 6395 6397 6398 6399 6402 6403 6404 6406 6407 6411 6413 6414 6415 6416 6416 6422 6423 6423 6425 6427 6427 6428 6429 6430 6431 6434 6434 6434 6438 6438 6441 6442 6445 6446 6450 6452 6452 6453 6455 6455 6456 6458 6459 6461 6467 6470 6472 6472 6472 6473 6473 6474 6474 6476 6485 6485 6488 6488 6489 6491 6492 6493 6495 6502 6503 6506 6511 6511 6514 6515 6519 6519 6522 6524 6526 6526 6527 6529 6530 6532 6533 6535 6535 6535 6536 6538 6543 6543 6544 6545 6545 6546 6546 6546 6551 6554 6554 6555 6556 6556 6557 6558 6558 6559 6560 6562 6562 6562 6566 6567 6569 6570 6572 6573 6576 6580 6581 6581 6588 6588 6590 6592 6595 6597 6598 6599 6599 6600 6600 6601 6602 6604 6608 6611 6613 6614 6614 6618 6618 6619 6619 6624 6624 6626 6627 6628 6633 6634 6635 6637 6639 6643 6647 6649 6649 6654 6656 6657 6660 6661 6666 6669 6669 6671 6674 6674 6674 6682 6683 6684 6685 6690 6694 6696 6699 6700 6702 6703 6709 6713 6714 6716 6716 6716 6718 6721 6722 6724 6725 6726 6727 6731 6734 6738 6739 6740 6740 6742 6743 6744 6744 6745 6746 6750 6750 6756 6756 6757 6759 6759 6760 6761 6761 6762 6763 6764 6764 6766 6767 6769 6769 6771 6771 6773 6774 6774 6781 6790 6790 6792 6793 6794 6795 6795 6796 6799 6801 6801 6803 6804 6804 6805 6807 6807 6807 6807 6809 6809 6811 6811 6811 6817 6817 6817 6820 6825 6827 6828 6828 6829 6831 6833 6838 6842 6844 6850 6851 6854 6854 6855 6856 6862 6863 6865 6870 6871 6873 6874 6875 6876 6876 6877 6878 6878 6883 6883 6884 6886 6894 6895 6897 6904 6910 6913 6917 6919 6920 6922 6923 6923 6923 6924 6925 6928 6929 6932 6932 6932 6934 6937 6938 6940 6942 6943 6944 6945 6947 6948 6948 6953 6953 6954 6956 6957 6957 6957 6958 6959 6963 6966 6966 6966 6967 6968 6968 6972 6973 6974 6975 6976 6978 6979 6980 6981 6982 6992 6998 6999 7000 7005 7007 7008 7008 7012 7013 7014 7015 7015 7015 7016 7017 7019 7020 7021 7023 7023 7024 7026 7026 7027 7029 7029 7030 7036 7038 7043 7048 7049 7049 7053 7055 7058 7058 7059 7068 7072 7073 7082 7082 7083 7084 7085 7086 7089 7089 7089 7094 7096 7097 7098 7099 7104 7105 7108 7110 7112 7113 7117 7119 7120 7120 7121 7123 7124 7124 7129 7133 7133 7133 7134 7135 7135 7139 7143 7143 7143 7146 7146 7147 7150 7151 7151 7159 7161 7161 7164 7168 7169 7169 7176 7177 7177 7179 7181 7186 7186 7189 7189 7190 7190 7191 7191 7195 7198 7201 7202 7207 7210 7211 7212 7212 7215 7215 7217 7217 7218 7218 7221 7221 7222 7224 7224 7229 7230 7231 7231 7235 7235 7237 7237 7237 7241 7241 7243 7247 7252 7258 7261 7264 7266 7273 7274 7276 7276 7284 7284 7284 7285 7288 7289 7290 7298 7301 7302 7305 7306 7307 7308 7308 7310 7312 7312 7313 7314 7314 7315 7320 7321 7321 7322 7322 7323 7325 7326 7327 7328 7333 7334 7339 7341 7346 7346 7351 7351 7352 7352 7353 7354 7355 7356 7357 7361 7362 7362 7371 7372 7373 7375 7379 7381 7383 7383 7385 7389 7395 7395 7396 7399 7408 7409 7410 7413 7413 7415 7415 7417 7418 7419 7419 7423 7425 7425 7425 7426 7428 7429 7430 7431 7434 7445 7446 7447 7451 7452 7452 7452 7458 7460 7460 7466 7468 7471 7473 7476 7478 7479 7482 7483 7484 7488 7493 7494 7497 7500 7501 7504 7506 7506 7507 7510 7514 7515 7518 7520 7520 7520 7523 7526 7533 7533 7539 7540 7542 7543 7548 7553 7554 7556 7556 7557 7560 7560 7560 7561 7561 7563 7566 7567 7570 7571 7575 7576 7579 7580 7584 7585 7585 7587 7589 7590 7590 7591 7591 7595 7600 7604 7605 7605 7607 7607 7609 7611 7621 7627 7627 7636 7636 7638 7639 7639 7644 7648 7652 7655 7657 7662 7663 7664 7665 7667 7671 7672 7675 7679 7679 7685 7685 7690 7691 7693 7693 7694 7697 7698 7700 7701 7701 7702 7704 7705 7706 7707 7710 7713 7715 7716 7719 7721 7722 7723 7725 7735 7735 7740 7740 7740 7741 7742 7749 7751 7755 7759 7760 7762 7762 7763 7765 7765 7766 7770 7770 7770 7772 7775 7777 7783 7786 7787 7788 7789 7793 7793 7794 7796 7799 7802 7802 7803 7806 7808 7809 7811 7811 7812 7815 7817 7819 7821 7823 7824 7824 7825 7828 7829 7829 7829 7833 7833 7836 7836 7836 7837 7837 7838 7838 7839 7841 7845 7846 7848 7850 7850 7850 7851 7851 7851 7852 7853 7855 7862 7862 7866 7867 7874 7874 7875 7877 7878 7879 7879 7880 7882 7883 7887 7888 7889 7891 7891 7892 7895 7905 7906 7912 7912 7915 7916 7917 7918 7918 7922 7922 7923 7923 7926 7928 7928 7930 7931 7936 7942 7943 7943 7947 7952 7952 7952 7953 7957 7958 7958 7959 7960 7963 7964 7967 7968 7972 7973 7973 7978 7981 7987 7990 7991 7996 7998 8001 8005 8007 8007 8008 8009 8011 8014 8018 8018 8025 8029 8029 8032 8032 8040 8040 8042 8043 8047 8049 8050 8056 8056 8059 8059 8062 8063 8064 8064 8064 8067 8069 8069 8072 8075 8075 8077 8077 8082 8088 8093 8094 8098 8099 8103 8106 8107 8107 8111 8111 8111 8113 8114 8117 8118 8118 8119 8121 8126 8132 8132 8134 8134 8142 8147 8148 8149 8153 8153 8154 8158 8161 8161 8162 8164 8165 8167 8171 8173 8173 8174 8176 8179 8180 8182 8184 8186 8188 8190 8192 8193 8193 8194 8195 8197 8198 8201 8204 8204 8205 8205 8209 8211 8211 8215 8216 8217 8218 8219 8221 8224 8225 8230 8232 8238 8238 8239 8239 8240 8242 8242 8244 8249 8257 8257 8259 8260 8261 8263 8269 8271 8274 8279 8282 8283 8285 8286 8287 8289 8293 8297 8298 8299 8301 8301 8304 8305 8308 8309 8313 8315 8318 8321 8321 8322 8327 8328 8328 8329 8330 8332 8332 8332 8333 8338 8339 8341 8343 8344 8345 8361 8361 8363 8364 8368 8368 8372 8375 8377 8378 8386 8386 8386 8387 8388 8389 8389 8390 8392 8392 8394 8394 8404 8406 8411 8414 8415 8416 8419 8428 8429 8431 8434 8436 8438 8441 8448 8450 8450 8457 8458 8461 8463 8464 8465 8465 8468 8468 8470 8471 8471 8475 8477 8477 8480 8481 8483 8484 8486 8487 8487 8487 8487 8499 8503 8503 8506 8509 8510 8510 8510 8519 8519 8520 8520 8521 8522 8525 8529 8531 8533 8533 8536 8536 8538 8539 8539 8542 8543 8545 8545 8545 8545 8547 8548 8549 8551 8553 8554 8555 8555 8556 8557 8559 8561 8563 8563 8568 8568 8571 8574 8575 8575 8576 8576 8577 8577 8577 8579 8579 8579 8580 8582 8583 8592 8595 8596 8599 8599 8603 8603 8603 8604 8604 8604 8607 8608 8610 8611 8611 8613 8614 8621 8623 8625 8626 8630 8633 8635 8635 8638 8641 8641 8642 8648 8650 8652 8652 8653 8654 8656 8658 8662 8663 8664 8668 8670 8671 8676 8677 8680 8681 8681 8682 8687 8687 8688 8689 8695 8697 8699 8701 8704 8704 8705 8709 8709 8712 8712 8713 8716 8719 8722 8722 8726 8727 8730 8735 8736 8740 8743 8743 8746 8746 8746 8747 8748 8748 8750 8756 8757 8757 8758 8760 8763 8765 8766 8767 8769 8772 8773 8773 8774 8776 8779 8779 8782 8784 8784 8785 8785 8786 8790 8792 8794 8795 8798 8805 8808 8810 8811 8814 8815 8816 8818 8822 8825 8825 8828 8829 8831 8832 8835 8835 8836 8843 8843 8843 8849 8849 8850 8850 8851 8852 8856 8857 8860 8860 8862 8865 8867 8870 8871 8872 8873 8877 8877 8877 8878 8879 8881 8886 8890 8890 8898 8901 8906 8914 8917 8918 8919 8921 8924 8925 8927 8927 8928 8928 8931 8933 8940 8945 8946 8949 8949 8949 8950 8952 8952 8953 8954 8955 8955 8956 8957 8960 8960 8963 8964 8964 8965 8967 8970 8972 8974 8974 8975 8975 8975 8976 8976 8978 8979 8980 8982 8982 8984 8984 8984 8988 8989 8992 8992 8998 8999 8999 8999 9007 9008 9008 9009 9010 9011 9019 9022 9023 9023 9023 9029 9030 9033 9033 9033 9036 9037 9041 9044 9045 9045 9047 9048 9051 9055 9064 9069 9070 9073 9077 9079 9081 9081 9085 9086 9086 9086 9087 9088 9094 9095 9105 9107 9108 9109 9110 9112 9112 9115 9115 9117 9117 9118 9118 9118 9122 9124 9126 9126 9127 9127 9132 9132 9133 9137 9138 9140 9144 9147 9147 9149 9153 9154 9154 9159 9164 9166 9167 9172 9173 9173 9177 9177 9181 9185 9187 9187 9189 9196 9197 9200 9202 9202 9204 9207 9208 9210 9210 9211 9215 9217 9218 9222 9223 9225 9228 9229 9231 9232 9233 9237 9238 9238 9247 9247 9253 9254 9254 9254 9256 9262 9262 9266 9272 9273 9274 9275 9280 9280 9281 9282 9285 9287 9288 9288 9290 9290 9294 9294 9294 9295 9296 9302 9303 9308 9308 9309 9309 9310 9311 9319 9321 9325 9326 9326 9327 9327 9328 9328 9331 9334 9336 9336 9340 9345 9347 9350 9351 9355 9357 9357 9360 9364 9367 9368 9370 9376 9380 9380 9380 9382 9384 9384 9388 9391 9391 9394 9394 9396 9397 9399 9402 9412 9415 9416 9421 9421 9423 9423 9423 9424 9430 9433 9433 9434 9434 9436 9436 9437 9437 9437 9439 9439 9441 9442 9444 9446 9447 9448 9449 9453 9453 9453 9454 9457 9458 9458 9458 9458 9459 9460 9461 9462 9462 9466 9469 9470 9472 9473 9475 9475 9478 9478 9481 9481 9483 9486 9487 9494 9495 9497 9498 9503 9506 9508 9509 9509 9511 9512 9513 9521 9521 9522 9522 9523 9525 9527 9531 9531 9533 9535 9539 9543 9545 9546 9550 9550 9551 9552 9559 9566 9569 9573 9579 9580 9582 9583 9584 9588 9598 9599 9600 9605 9609 9612 9614 9615 9616 9616 9618 9620 9621 9623 9623 9628 9632 9632 9632 9633 9634 9640 9640 9641 9641 9642 9643 9647 9651 9656 9657 9657 9658 9660 9663 9667 9667 9667 9670 9672 9675 9676 9677 9678 9679 9679 9681 9686 9691 9693 9696 9699 9700 9702 9702 9705 9705 9709 9711 9711 9711 9712 9713 9717 9718 9721 9721 9725 9726 9728 9732 9735 9738 9739 9740 9744 9751 9753 9753 9756 9759 9759 9772 9772 9780 9781 9782 9782 9788 9788 9790 9791 9797 9800 9804 9805 9809 9810 9811 9811 9813 9813 9814 9815 9817 9819 9825 9826 9827 9828 9829 9830 9832 9833 9835 9835 9839 9839 9840 9842 9846 9850 9851 9851 9852 9852 9854 9854 9856 9858 9859 9859 9859 9860 9862 9864 9867 9867 9872 9872 9874 9874 9875 9877 9882 9884 9886 9887 9889 9895 9896 9898 9901 9906 9912 9914 9917 9919 9922 9922 9922 9926 9927 9929 9930 9930 9931 9934 9934 9935 9939 9945 9947 9957 9957 9961 9962 9964 9965 9966 9967 9968 9968 9970 9972 9973 9973 9975 9976 9977 9977 9978 9978 9980 9984 9989 9990 9991 9993 9993 9999 9999 9999 Runtime: 1226955340 nanoseconds . Hashmaps . this hashmap code generates an array of 5000 random integers between 0 and 4999, and then inserts each of these integers into a hashmap | measures the time it takes to perform a lookup for the integer value 40 in the hashmap, and the time it takes to perform a binary search for the value 40 in the sorted array of integers | the output of the program displays the time it took for each search algorithm to execute in nanoseconds | . import java.util.HashMap; import java.util.Random; public class Hash { public static void main(String[] args) { // Create a new hashmap and list HashMap&lt;Integer, Integer&gt; hashmap = new HashMap&lt;&gt;(); int[] list = generateRandomList(5000); // Fill the hashmap with integers from the list as keys and values for (int i = 0; i &lt; list.length; i++) { hashmap.put(list[i], list[i]); } //For each element in the array, the &quot;put&quot; method of the HashMap is called with the element //as both the key and the value, this results in the key-value pair being added to the HashMap // Test the lookup and binary search algorithms with a value of 40 int value = 40; long lookUpTime = measureLookUpTime(hashmap, value); System.out.println(&quot;Time to search for quiz result of 40 in hashmap: &quot; + lookUpTime + &quot; nanoseconds&quot;); long binarySearchTime = measureBinarySearchTime(list, value); System.out.println(&quot;Time to search for result of 40 in binary: &quot; + binarySearchTime + &quot; nanoseconds&quot;); }//unsorted data and has a constant time complexity //latter is used for sorted data and has a logarithmic time complexity // Helper method to generate a random list of given size private static int[] generateRandomList(int size) { int[] list = new int[size]; Random random = new Random(); for (int i = 0; i &lt; size; i++) { list[i] = random.nextInt(size); } return list; } // Helper method to measure the time it takes to look up a value in the hashmap private static long measureLookUpTime(HashMap&lt;Integer, Integer&gt; hashmap, int value) { long start = System.nanoTime(); hashmap.containsKey(value); long end = System.nanoTime(); return (end - start); } // Helper method to measure the time it takes to perform a binary search on a sorted list private static long measureBinarySearchTime(int[] list, int value) { long start = System.nanoTime(); // Sort the list quickSort(list, 0, list.length - 1); //After the quickSort method completes, the list array will be sorted in ascending order. // Perform binary search int low = 0; int high = list.length - 1; while (low &lt;= high) { int mid = (low + high) / 2; if (list[mid] == value) { break; } else if (list[mid] &lt; value) { low = mid + 1; } else { high = mid - 1; } } long end = System.nanoTime(); return (end - start); } // Helper method to perform quick sort on the list private static void quickSort(int[] list, int low, int high) { if (low &lt; high) { int partIndex = partition(list, low, high); quickSort(list, low, partIndex - 1); quickSort(list, partIndex + 1, high); } } //used to divide the sub-array into two sub-arrays // Helper method to partition the list for quick sort private static int partition(int[] list, int low, int high) { //partition: part into 2 sub arrays int pivot = list[high]; //pivot element, which is the last element in the sub-array indicated by the &quot;high&quot; int i = low - 1; for (int j = low; j &lt;= high - 1; j++) { // iterates through the subarray from &quot;low&quot; to &quot;high - 1&quot; with another index &quot;j&quot; if (list[j] &lt; pivot) { i++; swap(list, i, j); //&quot;i&quot; and &quot;j&quot; are swapped so that the lesser element is in the first subarray } } // pivot element is swapped with the element at index &quot;i + 1&quot;, so that it is now in between the two subarrays swap(list, i + 1, high); return i + 1; }//The method then returns the index of the pivot element, which is now in its final sorted position. // Helper method to swap two elements in the list private static void swap(int[] list, int i, int j) { int temp = list[i]; list[i] = list[j]; list[j] = temp; } } Hash.main(null); . Time to search for quiz result of 40 in hashmap: 2702 nanoseconds Time to search for result of 40 in binary: 667226 nanoseconds .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2023/04/04/analysis.html",
            "relUrl": "/2023/04/04/analysis.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "CSUSM Talk",
            "content": "My takeaways from the ambassadors talk: . As someone who is interested in pursuing a career in physics and engineering, hearing the talk about California State University of San Marcos (CSUSM) impacted and inspired me greatly. The ambassadors from CSUSM shared their personal experiences and highlighted the unique opportunities that the university has to offer. I was particularly impressed by the variety of programs offered at CSUSM, including physics, chemistry, math, computer science, cybersecurity, and engineering. The ambassadors&#39; stories of resilience and determination also inspired me to persevere despite any challenges that may arise in my academic journey. Learning about the different internship and research programs available at CSUSM, as well as the various scholarship and grant opportunities, gave me a better understanding of the financial aspects of attending college. The computer science program at CSUSM sounded particularly intriguing to me. The ambassadors mentioned that the program offers a range of opportunities, including cybersecurity and software engineering. I was impressed by the fact that the program was new and seemed to be growing quickly, which could mean that there will be even more opportunities available in the future. Overall, I feel much more informed and excited about the possibility of attending CSUSM in the future. .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2023/03/28/CSUSM.html",
            "relUrl": "/2023/03/28/CSUSM.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Generic Types Hacks",
            "content": "Tech Talk . Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); // Queue interface uses LL implementation queue.add(&quot;John&quot;); queue.add(&quot;Jane&quot;); queue.add(&quot;Bob&quot;); // Collections has a toArray convertion Object[] arr = queue.toArray(); // Empty queue System.out.println(&quot;Empty Queue&quot;); while (queue.size() &gt; 0) // Interate while size System.out.println(queue.remove()); // Iterate of array System.out.println(&quot;Iterate over Array&quot;); for (Object a : arr) // Type is Object from convertion System.out.println(a); . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Alphabet extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Alphabet.key = key;} public enum KeyType implements KeyTypes {title, letter} private static final int size = 26; // constant used in data initialization // Instance data private final char letter; /* * single letter object */ public Alphabet(char letter) { this.setType(&quot;Alphabet&quot;); this.letter = letter; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Alphabet.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.letter.equals(this.getKey())) { output += this.letter; } else { output += super.getType() + &quot;: &quot; + this.letter; } return output; } // Test data initializer for upper case Alphabet public static Alphabet[] alphabetData() { Alphabet[] alphabet = new Alphabet[Alphabet.size]; for (int i = 0; i &lt; Alphabet.size; i++) { alphabet[i] = new Alphabet( (char)(&#39;A&#39; + i) ); } return alphabet; } /* * main to test Animal class */ public static void main(String[] args) { // Inheritance Hierarchy Alphabet[] objs = alphabetData(); // print with title Alphabet.setOrder(KeyType.title); Alphabet.print(objs); // print letter only Alphabet.setOrder(KeyType.letter); Alphabet.print(objs); } } Alphabet.main(null); . class [LREPL.$JShell$21$Alphabet; 26 Generic: Alphabet listed by title Alphabet: A Alphabet: B Alphabet: C Alphabet: D Alphabet: E Alphabet: F Alphabet: G Alphabet: H Alphabet: I Alphabet: J Alphabet: K Alphabet: L Alphabet: M Alphabet: N Alphabet: O Alphabet: P Alphabet: Q Alphabet: R Alphabet: S Alphabet: T Alphabet: U Alphabet: V Alphabet: W Alphabet: X Alphabet: Y Alphabet: Z class [LREPL.$JShell$21$Alphabet; 26 Generic: Alphabet listed by letter A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . /* * Animal class extends Generics and defines abstract methods */ public class Animal extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // print name only Animal.setOrder(KeyType.name); Animal.print(objs); } } Animal.main(null); . class [LREPL.$JShell$23$Animal; 6 Generic: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 class [LREPL.$JShell$23$Animal; 6 Generic: Animal listed by name Lion Pig Robin Cat Kitty Dog . public class Cupcake extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Cupcake.key = key;} public enum KeyType implements KeyTypes {title, flavor, frosting, sprinkles} // Instance data private final String frosting; private final int sprinkles; private final String flavor; // Constructor Cupcake(String frosting, int sprinkles, String flavor) { this.setType(&quot;Cupcake&quot;); this.frosting = frosting; this.sprinkles = sprinkles; this.flavor = flavor; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Cupcake.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.flavor.equals(this.getKey())) { output += this.flavor; } else if (KeyType.frosting.equals(this.getKey())) { output += this.frosting; } else if (KeyType.sprinkles.equals(this.getKey())) { output += &quot;00&quot; + this.sprinkles; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.flavor + &quot;, &quot; + this.frosting + &quot;, &quot; + this.sprinkles; } return output; } // Test data initializer public static Cupcake[] cupcakes() { return new Cupcake[]{ new Cupcake(&quot;Red&quot;, 4, &quot;Red Velvet&quot;), new Cupcake(&quot;Orange&quot;, 5, &quot;Orange&quot;), new Cupcake(&quot;Yellow&quot;, 6, &quot;Lemon&quot;), new Cupcake(&quot;Green&quot;, 7, &quot;Apple&quot;), new Cupcake(&quot;Blue&quot;, 8, &quot;Blueberry&quot;), new Cupcake(&quot;Purple&quot;, 9, &quot;Blackberry&quot;), new Cupcake(&quot;Pink&quot;, 10, &quot;Strawberry&quot;), new Cupcake(&quot;Tan&quot;, 11, &quot;Vanilla&quot;), new Cupcake(&quot;Brown&quot;, 12, &quot;Chocolate&quot;), }; } public static void main(String[] args) { // Inheritance Hierarchy Cupcake[] objs = cupcakes(); // print with title Cupcake.setOrder(KeyType.title); Cupcake.print(objs); // print flavor only Cupcake.setOrder(KeyType.flavor); Cupcake.print(objs); } } Cupcake.main(null); . class [LREPL.$JShell$25$Cupcake; 9 Generic: Cupcake listed by title Cupcake: Red Velvet, Red, 4 Cupcake: Orange, Orange, 5 Cupcake: Lemon, Yellow, 6 Cupcake: Apple, Green, 7 Cupcake: Blueberry, Blue, 8 Cupcake: Blackberry, Purple, 9 Cupcake: Strawberry, Pink, 10 Cupcake: Vanilla, Tan, 11 Cupcake: Chocolate, Brown, 12 class [LREPL.$JShell$25$Cupcake; 9 Generic: Cupcake listed by flavor Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate . MortLingo . public class Lingo extends Generics { // Class data public static KeyTypes key = KeyType.lang; // static initializer public static void setOrder(KeyTypes key) {Lingo.key = key;} public enum KeyType implements KeyTypes {lang, level, correct} // Instance data private final String lang; private final String level; private final int correct; // Constructor Lingo(String lang, String level, int correct) { this.setType(&quot;Lingo&quot;); this.lang = lang; this.level = level; this.correct = correct; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Lingo.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.lang.equals(this.getKey())) { output += this.lang; } else if (KeyType.level.equals(this.getKey())) { output += this.level; } else if (KeyType.correct.equals(this.getKey())) { output += + this.correct; } else { output = super.getType() + &quot;: &quot; + this.lang + &quot;, &quot; + this.level + &quot;, &quot; + this.correct; } return output; } // Test data initializer public static Lingo[] languages() { return new Lingo[]{ new Lingo(&quot;Java&quot;, &quot;Mastery&quot;, 9), new Lingo(&quot;JavaScript&quot;, &quot;Mastery&quot;, 10), new Lingo(&quot;C#&quot;, &quot;Beginner&quot;, 4), new Lingo(&quot;Python&quot;, &quot;Intermediate&quot;, 7), }; } public static void main(String[] args) { // Inheritance Hierarchy Lingo[] objs = languages(); // print with language Lingo.setOrder(KeyType.lang); Lingo.print(objs); // print level Lingo.setOrder(KeyType.level); Lingo.print(objs); // print correct out of 10 Lingo.setOrder(KeyType.correct); Lingo.print(objs); } } Lingo.main(null); . class [LREPL.$JShell$40F$Lingo; 4 Generic: Lingo listed by lang Java JavaScript C# Python class [LREPL.$JShell$40F$Lingo; 4 Generic: Lingo listed by level Mastery Mastery Beginner Intermediate class [LREPL.$JShell$40F$Lingo; 4 Generic: Lingo listed by correct 9 10 4 7 . CB video notes &amp; definitions . constructing an object using a class, and using an object | uses object.method because it is an accessor method that returns a variable that returns the method ex: String location = teacher.getLocation(); or teacher.changeLocation(&quot;Florida&quot;); . | using static methods means that you can use the methods without creating an object, example being the Math class where you can say class.method instead of object.method . | string class object where you can set it equal to a word like &quot;theater&quot; word.length . | contructor is used to create the instance of the class . | modifiers are used to change the access to a method, like public, private, etc . | setters/getters are used to protect the data in a class, getters return the value while setters sets or updates a value | . Linked Lists &amp; Queues . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words ); qWords.printQueue(); // Create iterable Queue of Integers Object[] numbers = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; QueueManager qNums = new QueueManager(&quot;Integers&quot;, numbers ); qNums.printQueue(); // Create iterable Queue of NCS Generics Animal.setOrder(Animal.KeyType.name); Alphabet.setOrder(Alphabet.KeyType.letter); Cupcake.setOrder(Cupcake.KeyType.flavor); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Alphabet.alphabetData(), Animal.animals(), Cupcake.cupcakes() ); qGenerics.printQueue(); // Create iterable Queue of Mixed types of data QueueManager qMix = new QueueManager(&quot;Mixed&quot;); qMix.queue.add(&quot;Start&quot;); qMix.addList( words, numbers, Alphabet.alphabetData(), Animal.animals(), Cupcake.cupcakes() ); qMix.queue.add(&quot;End&quot;); qMix.printQueue(); } } QueueTester.main(null); . Words count: 7 Words data: seven slimy snakes sallying slowly slithered southward Integers count: 10 Integers data: 0 1 2 3 4 5 6 7 8 9 My Generics count: 41 My Generics data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Mixed count: 58 Mixed data: Start seven slimy snakes sallying slowly slithered southward 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate End . Hack Challenges . // Hack 1 public class QueueExample { public static void main(String[] args) { Queue&lt;String&gt; queue = new LinkedList&lt;String&gt;(); // Adding elements to the queue queue.add(&quot;seven&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;seven&quot;); printQueue(queue); queue.add(&quot;slimy&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;slimy&quot;); printQueue(queue); queue.add(&quot;snakes&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;snakes&quot;); printQueue(queue); queue.add(&quot;sallying&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;sallying&quot;); printQueue(queue); queue.add(&quot;slowly&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;slowly&quot;); printQueue(queue); queue.add(&quot;slithered&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;slithered&quot;); printQueue(queue); queue.add(&quot;southward&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;southward&quot;); printQueue(queue); // Removing elements from the queue String data =queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); } // Helper method to print the contents of the queue public static void printQueue(Queue&lt;String&gt; queue) { System.out.println(&quot;Words count: &quot; + queue.size() + &quot;, data: &quot; + String.join(&quot; &quot;, queue)); System.out.println(); } } QueueExample.main(null); . Enqueued data: seven Words count: 1, data: seven Enqueued data: slimy Words count: 2, data: seven slimy Enqueued data: snakes Words count: 3, data: seven slimy snakes Enqueued data: sallying Words count: 4, data: seven slimy snakes sallying Enqueued data: slowly Words count: 5, data: seven slimy snakes sallying slowly Enqueued data: slithered Words count: 6, data: seven slimy snakes sallying slowly slithered Enqueued data: southward Words count: 7, data: seven slimy snakes sallying slowly slithered southward Dequeued data: seven Words count: 6, data: slimy snakes sallying slowly slithered southward Dequeued data: slimy Words count: 5, data: snakes sallying slowly slithered southward Dequeued data: snakes Words count: 4, data: sallying slowly slithered southward Dequeued data: sallying Words count: 3, data: slowly slithered southward Dequeued data: slowly Words count: 2, data: slithered southward Dequeued data: slithered Words count: 1, data: southward Dequeued data: southward Words count: 0, data: . //Hack 2 - merge 2 queues Queue&lt;Integer&gt; questionNums1 = new LinkedList&lt;&gt;(); //offer adds an element to the end of the queue and //returns a boolean value indicating whether the operation was successful questionNums1.add(1); questionNums1.add(4); questionNums1.add(5); questionNums1.add(8); Queue&lt;Integer&gt; questionNums2 = new LinkedList&lt;&gt;(); questionNums2.add(2); questionNums2.add(3); questionNums2.add(6); questionNums2.add(7); Queue&lt;Integer&gt; mergedQueue = new LinkedList&lt;&gt;(); while (!questionNums1.isEmpty() &amp;&amp; !questionNums2.isEmpty()) { if (questionNums1.peek() &lt; questionNums2.peek()) { //Retrieve the first element from each queue using the peek() method //peek method returns the element at the front of the queue without removing it mergedQueue.offer(questionNums1.poll()); } else { //Compare the two elements //enqueue the smaller one to the new queue using the offer() method. mergedQueue.offer(questionNums2.poll()); }//repeat } mergedQueue.addAll(questionNums1); mergedQueue.addAll(questionNums2); System.out.println(&quot;Python Question # Order: &quot; + mergedQueue); . Python Question # Order: [1, 2, 3, 4, 5, 6, 7, 8] . import java.util.Queue; import java.util.LinkedList; import java.util.Random; public class ShuffleQueue { public static void shuffle(Queue&lt;String&gt; queue) { Random rand = new Random(); //static shuffle method that takes a Queue of strings as its argument and shuffles the elements for (int i = 0; i &lt; queue.size(); i++) { int randomIndex = rand.nextInt(queue.size()); String temp = queue.peek(); //view or peek at the element at the front of the queue without removing it for (int j = 0; j &lt; randomIndex; j++) { queue.add(queue.remove()); }//iterating through the queue and swapping // each element with another element at a random position in the queue. queue.remove(); for (int j = 0; j &lt; randomIndex; j++) { queue.add(queue.remove()); } queue.add(temp); } } //Random object to generate random indices within the size of the queue //combination of remove and add methods to move elements around in the queue public static void main(String[] args) { Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); queue.add(&quot;Python&quot;); queue.add(&quot;JavaScript&quot;); queue.add(&quot;C#&quot;); queue.add(&quot;Java&quot;); System.out.println(&quot;Original queue: &quot; + queue); shuffle(queue); System.out.println(&quot;Shuffled queue: &quot; + queue); } } ShuffleQueue.main(null); . Original queue: [Python, JavaScript, C#, Java] Shuffled queue: [Java, Python, C#, C#] . //Hack 4 Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;(); //Create a new empty stack to store the elements of the queue queue.offer(1); queue.offer(2); queue.offer(3); queue.offer(4); queue.offer(5); Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); while (!queue.isEmpty()) { stack.push(queue.poll()); } //Dequeue all elements from the original queue and push them onto the stack Queue&lt;Integer&gt; reversedQueue = new LinkedList&lt;&gt;(); while (!stack.isEmpty()) { reversedQueue.offer(stack.pop()); }//Create a new empty queue to store the reversed elements // pop removes and returns the top element of the stack System.out.println(&quot;Original Question Numbers: &quot; + queue); System.out.println(&quot;Reversed Question Numbers: &quot; + reversedQueue); . Original Question Numbers: [] Reversed Question Numbers: [5, 4, 3, 2, 1] . import java.util.Queue; import java.util.Stack; public class Languages { public static void reverse(Queue&lt;String&gt; queue) { Stack&lt;String&gt; stack = new Stack&lt;&gt;(); //The reverse method creates a new Stack object, //then iterates through the elements in the queue, removing them one by one and pushing them onto the stack while (!queue.isEmpty()) { stack.push(queue.remove()); } while (!stack.isEmpty()) { queue.add(stack.pop()); //the method iterates //through the elements in the stack, popping them off one by one and adding them back to the queue } } } System.out.println(&quot;Reversed queue of languages: &quot;+queue); . Reversed queue of languages: [Java, C#, JavaScript, Python] .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2023/03/19/generic-types-hacks.html",
            "relUrl": "/2023/03/19/generic-types-hacks.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Title",
            "content": "Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); // Queue interface uses LL implementation queue.add(&quot;John&quot;); queue.add(&quot;Jane&quot;); queue.add(&quot;Bob&quot;); . true . Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); // Queue interface uses LL implementation queue.add(&quot;John&quot;); queue.add(&quot;Jane&quot;); queue.add(&quot;Bob&quot;); // Collections has a toArray convertion Object[] arr = queue.toArray(); // Empty queue System.out.println(&quot;Empty Queue&quot;); while (queue.size() &gt; 0) // Interate while size System.out.println(queue.remove()); // Iterate of array System.out.println(&quot;Iterate over Array&quot;); for (Object a : arr) // Type is Object from convertion System.out.println(a); . Empty Queue John Jane Bob Iterate over Array John Jane Bob . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Alphabet extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Alphabet.key = key;} public enum KeyType implements KeyTypes {title, letter} private static final int size = 26; // constant used in data initialization // Instance data private final char letter; /* * single letter object */ public Alphabet(char letter) { this.setType(&quot;Alphabet&quot;); this.letter = letter; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Alphabet.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.letter.equals(this.getKey())) { output += this.letter; } else { output += super.getType() + &quot;: &quot; + this.letter; } return output; } // Test data initializer for upper case Alphabet public static Alphabet[] alphabetData() { Alphabet[] alphabet = new Alphabet[Alphabet.size]; for (int i = 0; i &lt; Alphabet.size; i++) { alphabet[i] = new Alphabet( (char)(&#39;A&#39; + i) ); } return alphabet; } /* * main to test Animal class */ public static void main(String[] args) { // Inheritance Hierarchy Alphabet[] objs = alphabetData(); // print with title Alphabet.setOrder(KeyType.title); Alphabet.print(objs); // print letter only Alphabet.setOrder(KeyType.letter); Alphabet.print(objs); } } Alphabet.main(null); . class [LREPL.$JShell$39$Alphabet; 26 Generic: Alphabet listed by title Alphabet: A Alphabet: B Alphabet: C Alphabet: D Alphabet: E Alphabet: F Alphabet: G Alphabet: H Alphabet: I Alphabet: J Alphabet: K Alphabet: L Alphabet: M Alphabet: N Alphabet: O Alphabet: P Alphabet: Q Alphabet: R Alphabet: S Alphabet: T Alphabet: U Alphabet: V Alphabet: W Alphabet: X Alphabet: Y Alphabet: Z class [LREPL.$JShell$39$Alphabet; 26 Generic: Alphabet listed by letter A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . package com.nighthawk.hacks.methodsDataTypes; import java.util.HashMap; import java.util.Map; import java.util.Scanner; /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows public class Menu { // Format // Key {0, 1, 2, ...} created based on order of input menu // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); /** * Constructor for Menu, * * @param rows, is the row data for menu. */ public Menu(MenuRow[] rows) { int i = 0; for (MenuRow row : rows) { // Build HashMap for lookup convenience menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); } } /** * Get Row from Menu, * * @param i, HashMap key (k) * * @return MenuRow, the selected menu */ public MenuRow get(int i) { return menu.get(i); } /** * Iterate through and print rows in HashMap */ public void print() { for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { System.out.println(pair.getKey() + &quot; ==&gt; &quot; + pair.getValue().getTitle()); } } /** * To test run Driver */ public static void main(String[] args) { Driver.main(args); } } // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Do Nothing&quot;, () -&gt; DoNothingByValue.main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; IntByReference.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; Number.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2023/03/14/generictypes.html",
            "relUrl": "/2023/03/14/generictypes.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "FRQ 2017",
            "content": "(a) . This frq is trying to go over how to use specific methods and alter them in order to change a substring . the method replaceNthOccurrence is asked to be written to change the nth occurrence of a substring with a replacement string, str with repl | . Methods: | . A method in Java is a block of code that, when called, performs specific actions mentioned in it. You can insert values or parameters into methods, and they will only be executed when called. A method is similar to a function. . Control Structures: | . Control Structures can be considered as the building blocks of computer programs. A program is usually not limited to a linear sequence of instructions since during its process it may bifurcate, repeat code or bypass sections. . public void replaceNthOccurrence(String str, int n, String repl){ int i = findNthOccurrence(str, n); if(i != -1) { String a = currentPhrase.substring(0, i); //find the string from first index up till i String b = currentPhrase.substring(i+str.length()); //everything after the str currentPhrase = a + repl + b; } } . Answer for (a) . //Part (a) public void replaceNthOccurrence(String str, int n, String repl) { int loc = findNthOccurrence(str, n); if (loc != -1) { currentPhrase = currentPhrase.substring(0, loc) + repl + currentPhrase.substring(loc + str.length()); } } //comments on things .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2023/03/12/2017frqa.html",
            "relUrl": "/2023/03/12/2017frqa.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Data Types",
            "content": "import java.util.Scanner; public class BinaryAdd { public static void main(String[] args) { //Two variables int b = 0, c = 0; //This is to hold the output binary number int[] add = new int[10]; int b1 = 1; int b2 = 1; //while the ints are not 0, code uses mod //carry moves the 1+1 over and outputs 10 while (b1 != 0 || b2 != 0) { add[b++] = (int)((b1 % 2 + b2 % 2 + c) % 2); c = (int)((b1 % 2 + b2 % 2 + c) / 2); b1 = b1 / 2; b2 = b2 / 2; } if (c != 0) { add[b++] = c; } --b; System.out.print(&quot;1 + 1 = &quot;); while (b &gt;= 0) { System.out.print(add[b--]); } } } BinaryAdd.main(null); . 1 + 1 = 10 . //pass by value public class IntByValue { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n += 10: n = &quot; + n); // prints 5 n = n += 10; System.out.println(&quot; tAfter n += 10: n = &quot; + n); // prints 10 } public static void main(String[] args) { int n = 5; System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 changeInt(n); System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 } } IntByValue.main(null); . Main method before changeInt(n): n = 5 In changeInt method Before n += 10: n = 5 After n += 10: n = 15 Main method after changeInt(n): n = 5 . //by value - wrapper class public class IntegerByValueOrReference { public static void changeInteger(Integer n) { System.out.println(&quot;In changeInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n += 10; // behind the scenes, this is: n = new Integer(n+10) System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { Integer n = 5; System.out.println(&quot;Main method before changeInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeInteger(n); System.out.println(&quot;Main method after changeInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } IntegerByValueOrReference.main(null); . Main method before changeInteger(n): n = 5 hash code = 5 In changeInteger method Before change: n = 5 hash code = 5 After change: n = 15 hash code = 15 Main method after changeInteger(n): n = 5 hash code = 5 . import java.util.concurrent.atomic.AtomicInteger; public class PassByReference { public static void changeAtomicInteger(AtomicInteger n) { System.out.println(&quot;In changeAtomicInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n.set(n.get() + 10); // at this point, we are clearly working with reference data type System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { AtomicInteger n = new AtomicInteger(5); // unlike conventional wrapper class, this requires new System.out.println(&quot;Main method before changeAtomicInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeAtomicInteger(n); System.out.println(&quot;Main method after changeAtomicInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } PassByReference.main(null); . Main method before changeAtomicInteger(n): n = 5 hash code = 334996012 In changeAtomicInteger method Before change: n = 5 hash code = 334996012 After change: n = 15 hash code = 334996012 Main method after changeAtomicInteger(n): n = 15 hash code = 334996012 . public class IntByReference { private int value; public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } public void swapToLowHighOrder(IntByReference i) { if (this.value &gt; i.value) { int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } IntByReference.main(null); . Before: 21 16 After: 16 21 Before: 16 21 After: 16 21 Before: 16 -1 After: -1 16 . Hacks . Write a Jupyter notebook code example on the following primitive types with a code example (4 to 5 lines), preference would be using array and methods like substring and random as applicable: int, double, boolean, char. . // int example import java.util.Random; public class IntEx { public static void main(String[] args) { // int example int[] numbers = {1, 2, 3}; int product = numbers[0]; for (int i = 0; i &lt; numbers.length; i++) { product = product * numbers[i]; } System.out.println(&quot;Product of numbers: &quot; + product); } } IntEx.main(null); . Product of numbers: 6 . // double example import java.util.Random; public class DoubEx { public static void main(String[] args) { double pi = 3.141592653589793; System.out.println(&quot;The value of pi: &quot; + pi); } } DoubEx.main(null); . The value of pi: 3.141592653589793 . // boolean example import java.util.Random; public class BoolEx { public static void main(String[] args) { int product = 11; boolean isEven = (product % 2 == 0); System.out.println(&quot;Is the product even? &quot; + isEven); } } BoolEx.main(null); . Is the product even? false . // char example import java.util.Random; public class CharEx { public static void main(String[] args) { String word = &quot;compsci&quot;; char firstLetter = word.charAt(0); System.out.println(&quot;The first letter of the word &quot; + word + &quot; is &quot; + firstLetter); } } CharEx.main(null); . The first letter of the word compsci is c . Wrapper Classes . Now convert each of the examples to corresponding Wrapper classes, using arrays . // Integer example import java.util.Random; public class IntWrap { public static void main(String[] args) { Integer[] numbers = {1, 2, 3}; Integer product = numbers[0]; for (int i = 0; i &lt; numbers.length; i++) { product = product * numbers[i]; } System.out.println(&quot;Product of numbers: &quot; + product); } } IntWrap.main(null); . Product of numbers: 6 . // Double example import java.util.Random; public class DoubEx { public static void main(String[] args) { Double pi = 3.141592653589793; System.out.println(&quot;The value of pi: &quot; + pi); } } DoubEx.main(null); . // Boolean example import java.util.Random; public class BoolEx { public static void main(String[] args) { int product = 11; Boolean isEven = (sum % 2 == 0); System.out.println(&quot;Is the sum even? &quot; + isEven); } } BoolEx.main(null); . // Character example import java.util.Random; public class CharEx { public static void main(String[] args) { String word = &quot;hello&quot;; Character firstLetter = word.charAt(0); System.out.println(&quot;The first letter of the word &quot; + word + &quot; is &quot; + firstLetter); } } CharEx.main(null); .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2023/03/06/binary.html",
            "relUrl": "/2023/03/06/binary.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 10 - Recursion",
            "content": "A recursive method is a method that calls itself - a subproblem that calls itself repeatedly | . Two parts to the method: . a base case | recursive call | . After multiple calls, the base case is reached where recursion is stopped and a value is returned . Should be written first to avoid infinite recursion . //example of base case int fact(int n) { if (n &lt; = 1) // base case return 1; else return n*fact(n-1); } . Binary Search . Binary search algorithm | Data must be in sorted order | Keeps halving array until value is found | More efficient than linear search (O(log2n) vs O(n)) | . Big O notation . How long an algorithm takes to run | HashMap has O(1) which is same amount of time to execute | Binary Search has O(log N) which means it takes an additional step each time data doubles | Single and Nested loop is O(1) | . // Java Program to Illustrate Recursive Binary Search import java.util.*; // Main class class Binary { // Recursive binary search // Returns index of x if it is present // in arr[l..r], else return -1 int binarySearch(int arr[], int l, int r, int x) { // Restrict the boundary of right index // and the left index to prevent // overflow of indices if (r &gt;= l &amp;&amp; l &lt;= arr.length - 1) { int mid = l + (r - l) / 2; // If the element is present // at the middle itself if (arr[mid] == x) return mid; // If element is smaller than mid, then it can // only be present in left subarray if (arr[mid] &gt; x) return binarySearch(arr, l, mid - 1, x); // Else the element can only be present // in right subarray return binarySearch(arr, mid + 1, r, x); } // We reach here when element is not present in // array return -1; } } . Linear Recursion . A function that only makes a single call to itself each time the function runs (as opposed to one that would call itself multiple times during its execution) . Selection Sort: The algorithm works by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the end of the sorted part . | Merge Sort: It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves . | .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/lessonhw/2022/12/14/unit10.html",
            "relUrl": "/fastpages/lessonhw/2022/12/14/unit10.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Extra Credit Panel - 12/13/2022",
            "content": "My reflection on the tech panel 12/13: . Guest speakers Kathyleen Beveridge and Kris Porter came to speak about their career and give advice to us. First, as a director of marketing operations, Beveridge talked about her journey into high tech, from being an investment banker to HP to working in ThermoFischer scientific. Her main teaching point was about helping people and making an impact on their lives. Service in banking was helping people with retirement and providing ways to make them wealthy, while high tech would provide more incentive to help the community more. ThermoFischer is the world leader in serving the science community, and when she switched she enjoyed working with the computer science people to bring fresh, new ideas to the market and help impact the world more. I resonated with her talk because I want to go into science and technology, not due to the plethora of jobs that it supplies but because I want to do something that will mean a lot to other people in the future. Beveridge is also the prime example that you don’t need to be purely in computer science or engineering to be able to contribute to the science community/field. After that, software engineer Kris Porter told us about his career path and what he’s doing now. He went to UCLA for a bachelors and then Cal State for his masters in electrical engineering, before graduating when the stock market crashed and finding a job was hard. He worked at many different companies and was continuously learning new things including machine learning, self taught python, data structures and algorithms, and rigorous training at Twitter. Some projects he worked on were NBC media streaming infrastructure for the 2012 Olympics, Center for Embedded Network Sensors to scan the environment, and migrating Twitter with a new data center. His talk was very inspirational and interesting to listen to, especially since I want to go into electrical engineering as a major and main job focus. Using him as an example when he graduated during hard times, I can also go into this field and succeed. All in all, this panel with guest speakers really taught me a lot about how the real work of computer science, engineering, and STEM in general works. .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/learning/2022/12/14/extra-cred.html",
            "relUrl": "/fastpages/learning/2022/12/14/extra-cred.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 9 - Inheritance",
            "content": "Subclasses . Method to create hierarchy between classes by inheriting from other classes | parent and child classes | extends extend a class to show its inherited and extends functionality | Subclass inherits all methods and fields from superclass, and constructor can be carried out from subclass | super refers to superclass or parent objects | . // Hacks 1 private class Plane { private String model = &quot;Boeing 737&quot;; private int age = 3; //two attributes public void getAge(String model, int age) { println(&quot;Age: &quot; + age); } } private class Jet extends Plane { private String color = &quot;blue&quot;; } . Overload &amp; Override . Overload happens when there are two methods with same name but different arguments or parameters | Method override happens when child class has the same method that is present in a parent class, overwrites base class method | . //hack 2 public class Plane { private String model = &quot;Boeing 737&quot;; private int age = 3; public void engineBurr() { System.out.println(&quot;brrrrrr&quot;); } } private class Jettison extends Plane { public Jettison(String model, int age, String color) { super(model, age); this.color = color; @Override public void engineBurr() { System.out.println(&quot;BRRRRRRRRR&quot;); } } . Polymorphism . Ability of class to provide different implementations of methods, such as overloading, overriding, late binding | . //Hack 3 private class Jets extends Plane { @Override public void getAge(String model, int age, String color) { println(&quot;Age: &quot; + age); } public void getAge(int age, String color) { println(&quot;Age: &quot; + age); } } .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/lessonhw/2022/12/13/unit9-inheritance.html",
            "relUrl": "/fastpages/lessonhw/2022/12/13/unit9-inheritance.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 8 - 2D Arrays",
            "content": "Learning Objective! . Represent collections of related primitive and object reference data using two dimensional array objects. . 2D Array Vocab: . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . The Basics: . A 2D array is an array of arrays, and can be a better way to store data | Declaring a 2D array: DataType[][] nameOf2DArray | . | Initializing a 2D array DataType[][] nameOf2DArray = new DataType[r][c]; r = # of rows The # of arrays in the array | r = list.length c = # of columns | . | The # of elements in the inner arrays | c = list[0].length | . | . | . | . Initializing a Sample Array: . public class Test { public static void main(String[] args) { int[][] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; System.out.println(&quot;arr[0][0] = &quot; + arr[0][0]); System.out.println(&quot;arr[1][2] = &quot; + arr[1][2]); System.out.println(&quot;arr[2][1] = &quot; + arr[2][1]); } } Test.main(null); . arr[0][0] = 1 arr[2][0] = 6 arr[2][1] = 8 . Accessing and Updating Elements of a 2D Array: . nameOf2DArray[r][c] | . Hack 1: Access the last element of the 2D Array list: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! } } Test.main(null); . a quick tip for the future: list[list.length - 1][list[0].length - 1] | Updating an element: list[r][c] = value; | . | . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); } } Test.main(null); . Change Austin to Athens and print! . Nested Loops, Our Beloved: . You can use Nested Loops to traverse 2D Arrays for example: to print out an entire array in order, you need to use these | . | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Make sure your columns for loop is always inside your rows for loop! Unless you want it printed the other way of course | . | Print spaces and lines in between to make a neater matrix | . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Print out the array without using numerical values! } } Test.main(null); . Searching for a Value in a 2D Array: . Here&#39;s a quick example to illustrate: | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Note: in the code, you see the use of : which essentially means within. | . Hack 4: Finding the Min/Max Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); } } Test.main(null); . Use nested for loops to find the longest string! . HW! . Please submit screenshots of your 4 hacks up and running to our Google Form, which also has a few 2D array related multiple choice questions. . Additionally, Complete and send a screenshot of your code for 2017 FRQ Q4: Successor Array in that same google form. . Please submit as a pair or group. .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/jupyter/2022/12/06/unit8.html",
            "relUrl": "/jupyter/2022/12/06/unit8.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 8 Hacks & HW",
            "content": "public class Test { public static void main(String[] args) { int[][] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; System.out.println(&quot;arr[0][0] = &quot; + arr[0][0]); System.out.println(&quot;arr[1][2] = &quot; + arr[1][2]); System.out.println(&quot;arr[2][1] = &quot; + arr[2][1]); } } Test.main(null); . arr[0][0] = 1 arr[1][2] = 6 arr[2][1] = 8 . Hack 1 . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(&quot;arr[2][2] = &quot; + arr[2][2]); } } Test.main(null); . arr[2][2] = i . Hack 2 . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; arr[2][0] = &quot;Athens&quot;; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); System.out.println(arr[2][0]); } } Test.main(null); . Change Austin to Athens and print! Athens . Nested Loop . nested for loop places one for loop inside another for loop | inner loop repeats for every iteration of the outer one | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Hack 3 . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 3; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } // Print out the array without using numerical values! } } Test.main(null); . Atlanta Baltimore Chicago Australia Boston Cincinnati Austin Beaumont Columbus . Searching for a Value in 2D Array . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Hack 4 . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; for (String[] row : arr) { for (String item : row) { if (item.length()&gt;longest.length()) { longest = item; } } } // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!: &quot; + longest); } } Test.main(null); . Use nested for loops to find the longest or shortest string!: Cincinnati . Homework . 2017 FRQ 4 . (a) Write a static method findPosition that takes an integer value and a 2D integer array and returns the position of the integer in the given 2D integer array. If the integer is not an element of the 2D integer array, the method returns null. For example, assume that array arr is the 2D integer array shown at the beginning of the question. • The call findPosition(8, arr) would return the Position object (2,1) because the value 8 appears in arr at row 2 and column 1. • The call findPosition(17, arr) would return null because the value 17 does not appear in arr. . /** Returns the position of num in intArr; * returns null if no such element exists in intArr. * Precondition: intArr contains at least one row. */ public static Position findPosition(int num, int[][] intArr) { for {int r=0; r&lt;intArr.length; r++} { for {int c=0; c&lt;intArr[0]; c++} {if(num==intArr[r][c]) return new Position(r,c); } } return null; } . (b) Write a static method getSuccessorArray that returns a 2D successor array of positions created from a given 2D integer array . /** Returns a 2D successor array as described in part (b) constructed from intArr. * Precondition: intArr contains at least one row and contains consecutive values. * Each of these integers may be in any position in the 2D array. */ public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] successor = new Position[intArr.length][intArr[0].length]; for(int r=0;r&lt;intArr.length;c++) { for(int c=0;c&lt;intArr[0].length;c++) { Position p = findPosition(intArr[r][c]+1 , intArr); } } } . Tree . int height = 3; int spaceCounter = 0; int leafCounter = 0; int trunkSpace = height - 1; String[][] tree = new String[height][2*(2*height-1)-1]; for (int i = 0; i &lt; tree.length; i++) { leafCounter = 0; int maxLeaf = i * 2 + 1; for (int j = 0; j &lt; tree[i].length; j++) { if (j &lt; (2*(height - 1 - i))) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else if (j % 2 != 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot; &quot;; } else { tree[i][j] = &quot; &quot;; } } } for (int i = 0; i &lt; tree.length; i++) { for (int j = 0; j &lt; tree[i].length; j++) { System.out.print(tree[i][j]); } System.out.println(); } . import java.util.Scanner; Scanner input = new Scanner(System.in); System.out.println(&quot;How tall would you like your tree to be?&quot;); int height = input.nextInt(); System.out.println(height); int leafCounter = 0; int trunkSpace = height - 1; String[][] tree = new String[height + height - 1][2*(2*height-1)-1]; for (int i = 0; i &lt; tree.length - (height-1); i++) { leafCounter = 0; int maxLeaf = i * 2 + 1; for (int j = 0; j &lt; tree[i].length; j++) { if (j &lt; (2*(height - 1 - i))) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else { tree[i][j] = &quot; &quot;; } } } for (int i = tree.length - (height-1); i &lt; tree.length; i++) { int maxLeaf = 3; leafCounter = 0; for (int j = 0; j &lt; tree[i].length; j++) { if (j &lt; 2 * height - 1 -3) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt; maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else { tree[i][j] = &quot; &quot;; } } } for (int i = 0; i &lt; tree.length; i++) { for (int j = 0; j &lt; tree[i].length; j++) { System.out.print(tree[i][j]); } System.out.println(); } . How tall would you like your tree to be? 5 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/lessonhw/2022/12/06/unit-8.html",
            "relUrl": "/fastpages/lessonhw/2022/12/06/unit-8.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 3 Notes",
            "content": "Boolean Expressions &amp; If Statements . Boolean Expressions: represent logic of true or false | Truth Tables: A truth table has one column for each variable, one row for each possible combination of variable values, and a column that specifies the value of the function for that combination | breakdown of possible values that can be obtained using logic | . De Morgans . This law says that &quot;the complement of two union sets is the intersection of their complements&quot;. It means that saying &quot;not and &quot; is the same as saying those statements separately | . boolean vanilla = true; boolean chocolate = true; if (!(chocolate &amp;&amp; vanilla)){ System.out.println(&quot;I do not like chocolate or vanilla&quot;); } else{ System.out.println(&quot;I like chocolate and vanilla&quot;); //de morgans of above statement } . I like chocolate and vanilla . if (!chocolate || !vanilla){ System.out.println(&quot;I do not like chocolate or vanilla&quot;); } else{ System.out.println(&quot;I like chocolate and vanilla&quot;); } //same output . I like chocolate and vanilla . Comparing . Comparing operators are: ==, !=, &lt;, &gt;, &lt;=, &gt;= | Can be used to compare strings, numbers, and objects | .equals operator can also be used | . public class Compare { //program to compare strings public static void main(String args[]) { String string1 = new String(&quot;Riya and Ridhi&quot;); String string2 = new String(&quot;riya and ridhi&quot;); String string3 = new String(&quot;Riya&quot;); String string4 = new String(&quot;Riya&quot;); String string5 = new String(&quot;riya&quot;); // Comparing for String 1 != String 2 System.out.println(&quot;Comparing &quot; + string1 + &quot; and &quot; + string2 + &quot; : &quot; + string1.equals(string2)); //use of .equals // Comparing for String 3 = String 4 System.out.println(&quot;Comparing &quot; + string3 + &quot; and &quot; + string4 + &quot; : &quot; + string3.equals(string4)); // Comparing for String 4 != String 5 System.out.println(&quot;Comparing &quot; + string4 + &quot; and &quot; + string5 + &quot; : &quot; + string4.equals(string5)); // Comparing for String 1 != String 4 System.out.println(&quot;Comparing &quot; + string1 + &quot; and &quot; + string4 + &quot; : &quot; + string1.equals(string4)); } } Compare.main(null); . Comparing Riya and Ridhi and riya and ridhi : false Comparing Riya and Riya : true Comparing Riya and riya : false Comparing Riya and Ridhi and Riya : false .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/lessonhw/2022/12/02/unit-3-notes.html",
            "relUrl": "/fastpages/lessonhw/2022/12/02/unit-3-notes.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit3 Grading (3)",
            "content": "Name Grade Comments . Hetvi Trivedi | 0.9/1 | Completed all homework | . Jazair Tallman | 0.9/1 | Completed all homework | . Ellen Xu | 0.9/1 | Completed all homework | . Akhil Nandhakumar | 0.93/1 | Completed all the homework. Also have extra notes on Truth Tables and De Morgan | . Bailey Say | 0.93/1 | Completed all the homework. Also have extra notes on Truth Tables and De Morgan | . Rohan Gaikwad | 0.93/1 | Completed all the homework. Also have extra notes on Truth Tables and De Morgan | . Nicolas Mounier | 0.93/1 | Completed all the homework. Also have extra notes on Truth Tables and De Morgan | . Andrew Meng | 0.93/1 | All hw complete + reflection on code and approach | . Sahil Samar | 0.9/1 | Completed all homework | . Tristan Copley | 0.9/1 | Completed FRQ and Quizziz | . Nathan Shih | 0.9/1 | Completed all homework | . Reem Ben Ishai | 0.9/1 | Completed FRQ and Quizziz | . Saathvika Ajith | 0.87/1 | Completed FRQ and Quizziz, but not conditional exercises | . Calissa Tyrrell | 0.9/1 | Completed all the homework | . Evan Sanchez | 0.9/1 | Completed all the homework | . Samuel Wang | 0.9/1 | Completed all the homework | . Kian Pasokhi | 0.9/1 | Completed all the homework | . Rohan Juneja | 0.9/1 | Completed all the homework | . Kinish Sathish | 0.9/1 | Completed all the homework | . Jay Manjrekar | 0.9/1 | Completed all the homework | . Gabriel Boudreau | 0.9/1 | Completed all the homework | . Rebecca Su | 0.96/1 | Completed all the homework, did extra exercises | . Meena Annamalai | 0.9/1 | Completed the FRQ but did not complete half conditionals exercises | . Pranavi Inukurti | 0.9/1 | Completed the FRQ but did not complete half conditionals exercises | . Madhumita Narayan | 0.9/1 | Completed the FRQ but did not complete half conditionals exercises | . Shraddha Kadaba | 0.9/1 | Completed the FRQ but did not complete half conditionals exercises | . Sanjay Bharadwaj | 0.96/1 | Completed all the homework, did extra exercises | . Evan Yang | 0.96/1 | Completed all the homework, did extra exercises | . Karthik Valluri | 0.96/1 | Completed all the homework, did extra exercises | . Pranav Sarathy | 0.96/1 | Completed all the homework, did extra exercises | . Rohit De | 0.9/1 | Completed exercises, not FRQ | . Kurtis Kwan | 0.9/1 | Completed exercises, not FRQ | . Linda Liu | 0.9/1 | Completed FRQ and Quizizz, but not all exercises | .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2022/12/01/Unit3-Grading-(3).html",
            "relUrl": "/2022/12/01/Unit3-Grading-(3).html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 7 - ArrayList",
            "content": "import java.util.ArrayList; public class Demo{ public static void main(String[] args) { ArrayList&lt;String&gt; fruits = new ArrayList&lt;String&gt;(); fruits.add(&quot;apple&quot;); fruits.add(&quot;pineapple&quot;); fruits.add(&quot;pineapple&quot;); fruits.add(&quot;pears&quot;); fruits.add(&quot;oranges&quot;); for (int i = 0; i &lt; fruits.size(); i++) { System.out.println(fruits.get(i)); } } } Demo.main(null) . Fixed length: Once an array is created, we cannot change its size. So consider using arrays when the numbers of elements are known and fixed. Otherwise, you should consider using another dynamic container such as ArrayList. It’s very fast to access any elements in an array (by index of the elements) in constant time: accessing the 1st element takes same time as accessing the last element. So performance is another factor when choosing arrays. An array can hold primitives or objects, stores values of the primitives. An array of objects stores only the references to the objects. In Java, the position of an element is specified by index which is zero-based. That means the first element is at index 0, the second element at index 1, and so on. An array itself is actually an object. . //Hack 1 import java.util.ArrayList; public class hack1 { public static void main (String[] args) { ArrayList&lt;Integer&gt; testArray = new ArrayList&lt;Integer&gt;(); testArray.add(103); testArray.add(3); testArray.add(12312312); System.out.println(testArray.size()); } } hack1.main(null); . 3 . //Hack 2 import java.util.ArrayList; ArrayList&lt;String&gt; color = new ArrayList&lt;String&gt;(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); for (int i = 0; i &lt; color.size(); i++) { if (color.get(i).contains(&quot;red&quot;)) { color.remove(i); } } System.out.println(color); . [green box, blue water] . //Hack 3 ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(6); num.add(1); num.add(1); int sum = 0; for (int number : num) { sum += number; } System.out.println(sum); . 8 .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/lessonhw/fastpages/2022/11/30/unit7hacks.html",
            "relUrl": "/lessonhw/fastpages/2022/11/30/unit7hacks.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Study Blog",
            "content": "Physics unit that we&#39;re currently learning is: . Circular Motion . Equations to know: . frequency = 1/period | arc length = r(angle) | Tangential speed = s/t or 2pir/T | .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/learning/study/2022/11/14/study-blog-physics.html",
            "relUrl": "/learning/study/2022/11/14/study-blog-physics.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 6 HW - FRQ part A",
            "content": "Fixed length: Once an array is created, we cannot change its size. So consider using arrays when the numbers of elements are known and fixed. Otherwise, you should consider using another dynamic container such as ArrayList. | It’s very fast to access any elements in an array (by index of the elements) in constant time: accessing the 1st element takes same time as accessing the last element. So performance is another factor when choosing arrays. | An array can hold primitives or objects, stores values of the primitives. | An array of objects stores only the references to the objects. | In Java, the position of an element is specified by index which is zero-based. That means the first element is at index 0, the second element at index 1, and so on. | An array itself is actually an object. | . //Hack 1 int[] arrayOne = {2, 4, 6, 8, 10, 12}; for (int i = 0; i &lt; arrayOne.length; i+=2) { // if smaller than array length then increments by 2 System.out.println(arrayOne[i]); //prints array } . 2 6 10 . //Hack 2 int[] myNumbers = new int[] {4, 5, 3, 1, 2}; //jumbled array int i = 0; int min = 0; public void arraySorter(int[] array) { for (int i = 1; i &lt; array.length+1; i++) { //sorts in order for (int j = 0; j &lt; array.length; j++) { if (i == array[j]) { System.out.println(i); } } } } arraySorter(myNumbers); . 1 2 3 4 5 . a) Write the ClubMembers method addMembers, which takes two parameters. The first parameter is a String array containing the names of new club members to be added. The second parameter is the graduation year of all the new club members. The method adds the new members to the memberList instance variable. The names can be added in any order. All members added are initially in good standing and share the same graduation year, gradYear. . public void addMembers(String[] names, int graduationYear) { //string that includes the names - 1st parameter //int that contains the grad year - 2nd parameter for (int i = 0; i&lt;names.length; i++) { //repeats for as many letters are in the name memberList.add(new Member(names[i], graduationYear, true)); //adds the names and grad year to the member list for each member return memberList; //this could possibly be names } } .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/lessonhw/learning/jupyter/2022/11/08/unit6.html",
            "relUrl": "/lessonhw/learning/jupyter/2022/11/08/unit6.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 4 HW - Iteration & Caeser Cipher",
            "content": "An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet. | It is called an &quot;iterator&quot; because &quot;iterating&quot; is the technical term for looping. To use an Iterator, you must import it from the java.util package. | for, while, ect | sequence of instructions or code being repeated until a specific end result is achieved | MacroMonkeys repo with caesar cipher shifts | Iteration is crucial to making coding simpler and less convoluted | Exam weights Iteration as 17.5-22.5% of the test, with 7-9 MC and part of FRQ 1 | . Nested Loop . nested for loop places one for loop inside another for loop | inner loop repeats for every iteration of the outer one | . While Loop . repeats a specific block of code for as long until a certain condition is met, then it stops | do while loop - executes code at least once and then repeatedly depending on a boolean condition at the end of a block | . int i = 5450000; int years = 0; while (i &lt; 30000000){ //hack 2 with while loop i *= 1.05; years += 1; } System.out.println(years); . 35 . FOR LOOPS . the test condition is checked each time through the loop and the loop continues as long as the condition is true | the loop control variable change is done at the end of each execution of the body of the loop | When the loop condition is false, execution will continue at the next statement after the body of the loop. | . public class ForLoops { //hack 2 public static void main(String[] args) { for (int x = 10; x &lt;= 15; x++) { //for loop iteration System.out.println(x); } } } ForLoops.main(null); . 10 11 12 13 14 15 . HW - Caesar Cipher . public class CaesarCipher { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, //creates a string list for lowercase letters &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String[] capitalLetters = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, //uppercase &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;}; static String message1 = &quot;Kfzb gly!&quot;; static String message2 = &quot;zlab zlab zlab&quot;; static String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; //sets 3 different messages String letterIndividual = &quot;&quot;; public CaesarCipher(String msg) { for (int i = 0; i &lt; msg.length(); i++) { letterIndividual = msg.substring(i, i+1); //iteration through i++ and j++ if (letterIndividual.equals(&quot; &quot;)) { System.out.print(&quot; &quot;); } //if statement if (letterIndividual.equals(&quot;!&quot;)) { System.out.print(&quot;!&quot;); } for (int j = 0; j &lt; letters.length; j++) { if (letterIndividual.equals(letters[j])) { System.out.print(letters[(j+3)%26]); } //adds three and then uses modulus function if (letterIndividual.equals(capitalLetters[j])) { System.out.print(capitalLetters[(j+3)%26]); //key shift } } } System.out.println(&quot;&quot;); } public static void main(String[] args) { //prints the decoded messages CaesarCipher decode = new CaesarCipher(message1); CaesarCipher decode2 = new CaesarCipher(message2); CaesarCipher decode3 = new CaesarCipher(message3); } } CaesarCipher.main(null) . Nice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/lessonhw/learning/jupyter/2022/11/08/unit-4.html",
            "relUrl": "/lessonhw/learning/jupyter/2022/11/08/unit-4.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 1 HW - Grade Calculator",
            "content": "No presentation . We should use java because its widely used in industries | To print something, use System.out.print(); and inside the parenthesis put text in quotes (String) | To print with a new line, use System.out.println(); | To comment your code, use // for single line comments and /**/ for multiple lines | . Casting . Assigning a value of one primitive data type to another type; operators like int and doubles | Division - dividing two ints create one int | Truncating - fraction part of floating point value is truncated | Rounding - rounds to nearest int | . public class Casting { public static void main(String[] args) { System.out.println(8/5); //this will result in single int without decimal System.out.println(8.0/5); //can also be used with double } } Casting.main(null) . 1 1.6 . //Hack #1 public class Printing { public static void main(String[] args) { System.out.println(&quot;Riya&quot;); //printing my name System.out.println(&quot;Team Crimebusters&quot;); //printing my team name } } Printing.main(null); . Riya Team Crimebusters . public class Biodata { //hack 2 public static void main(String[] args) { final boolean cool = true; String name = &quot;Riya is cool: &quot;; System.out.println(name + cool); } } Biodata.main(null); . Riya is cool: true . HW . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Is the final in a seperate category? True to False&quot;); boolean tof = myObj.nextBoolean(); // Read user input System.out.println(&quot;Final in a seperate category is &quot; + tof); // Output user input if (tof) { System.out.println(&quot;What is your current grade rn?&quot;); double grade = myObj.nextDouble(); System.out.println(grade); System.out.println(&quot;What is % of grade that is final?&quot;); double percent = myObj.nextDouble(); System.out.println(percent + &quot;%&quot;); System.out.println(&quot;What is your desired grade?&quot;); double desired = myObj.nextDouble(); System.out.println(desired); double output = (desired - (grade * ((100-percent)/100)))/(percent/100); System.out.println(&quot;You need a &quot; + output + &quot; on your final&quot;); } else { System.out.println(&quot;What is your current grade rn?&quot;); //input grade double grade = myObj.nextDouble(); System.out.println(grade); System.out.println(&quot;What is the % of grade that is test category?&quot;); double percent = myObj.nextDouble(); System.out.println(percent + &quot;%&quot;); System.out.println(&quot;What is current % in tests category?&quot;); double currentpercent = myObj.nextDouble(); System.out.println(currentpercent + &quot;%&quot;); System.out.println(&quot;What is the current amount of points in the test category?&quot;); int currentpts = myObj.nextInt(); System.out.println(currentpts); System.out.println(&quot;How many pts is the final?&quot;); int pts = myObj.nextInt(); System.out.println(pts); System.out.println(&quot;What is your desired grade?&quot;); //what grade do I want double desired = myObj.nextDouble(); System.out.println(desired); // double output = (desired - ((grade * currentpercent)*((100 - percent) / 100)))/((currentpts + pts)/(percent / 100))- currentpts; double output = ((desired - grade+currentpercent)*(currentpts+pts)-currentpts*currentpercent)/100; System.out.println(&quot;You need &quot; + output + &quot; pts on your final&quot;); } } } ScanPrimitives.main(null); //asks for input . Is the final in a seperate category? True to False Final in a seperate category is true What is your current grade rn? 88.4 What is % of grade that is final? 20.0% What is your desired grade? 90.0 You need a 96.39999999999993 on your final .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/lessonhw/fastpages/jupyter/2022/11/08/unit-1.html",
            "relUrl": "/lessonhw/fastpages/jupyter/2022/11/08/unit-1.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Collegeboard MC Test & Test Corrections",
            "content": "Overall Score . On this Collegeboard MC test I got a 31/40. I think that this score is semi-decent for me because I&#39;m not used to the type of questions compsci classes offer since I didn&#39;t take CSP. I definitely think I could have done much better however, since I made a couple of silly errors while taking the test. . Below are my quiz corrections: . Question 4 . For this question, I chose B) Value is 2.333333 and this was the wrong answer because the code is not using floating point division, and the integer values are not doubles. Since they are integers I would disregard the remainder and so the answer is C) Value is: 2. . Question 9 . I chose E) sum += sum + key[i]; which is the wrong answer because it adds the current sum to the sum that is produced during each iteration and cause an out of bounds once i reaches key length. Therefore the answer will be B) sum += key[i-1]; because it has indices that start at 0 and increases to key.length. . Question 14 . I chose B) myVehicles[v].getMileage() which was the wrong answer because I didn&#39;t realize that v was assigned as the value of the elements of myVehicles and therefore the answer E) v.getMileage() is the correct answer because the one I chose was too convoluted. . Question 27 . I chose C) 6 because I misinterpreted the question and thought it was asking for the value if x were incremented by 1. Since it iterates through the x and y until the value of n or mystery is just greater than 2, the output would be x=8 or D. . Question 30 . I chose D) ilercomp because I thought that the word would complete the full loop which would be the case if the 2nd call was howFar+1 instead of just howFar. In this case, the answer would be 1 letter less than the full word, or C) ilercom. . Question 31 . I chose D) 7 3 4 11 8 because I thought that the k value that was used was the 0th + 1st index, which is 7. However, this is wrong because k+1 was what it asked for, in which case the 0th index would be 5. Therefore, C is the correct answer because it starts at 5 and goes all the way to 19. . Question 33 . I chose C) 12 because I misread and thought that k was increasing by 1 every time. Since k is always less than 4, the || function makes the condition always true and therefore an infinite loop will be carried out and the answer is then E. . Question 38 . I choose D) as a complete guess because I didn&#39;t understand how to do the DeMorgans of the expression. However, after checking I realized that changing the or to and and adding an x&gt;1000 on the left side will produce the same equivalent expression. . Question 39 . I chose B) because I thought that since the else condition was run, the 27 would be divided by 3 to get 9. However, that is just what the first recursive call brought as a value, and it needs to be run through again, this time running it through until recur(recur(4)) or recur(8) returns 16, which is D. .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/learning/collegeboard/2022/11/08/collegeboardmcrevisions.html",
            "relUrl": "/fastpages/learning/collegeboard/2022/11/08/collegeboardmcrevisions.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 5 HW - 2019 FRQ",
            "content": "class plan for create objects | object is the instances of a class | public mens anyone can access while private means that there is restricted access | constructors - initialize instance variables when object is called | set an initial object state and initial instance variables | . There are 3 steps to creating and calling methods: . 1) declare object of the class in the main method 2) call the method 3) write the method header and body . Creating a Class . creating classes provides templates for creating objects, which can bind code into data | has definitions of methods and data | Class names should be nouns, in mixed cases with the first letter of each internal word capitalized. | Interfaces names should also be capitalized just like class names. | Use whole words and must avoid acronyms and abbreviations | . Constructors . used to create the instance of the class | name is same as class name and has no return type and only returns object to class; adding return would make it a method | . Accessor Method . Accessor methods return the value of a private method | getter returns the value of data types using the accessor method (instance method to get or set values of an object) | . Mutator Method . Mutator methods reset the value of a private variable | relates to the setter because it updates the value of the variable | void type represents void return type as a class and contains a public value and is assigned the value of null since it isn’t instantiable . | this keyword refers to current object in a method or constructor . | . public String getVariable(){ //accessor method } public void setVariable(String variable){ this.variable = variable; //example of mutator method } . Static &amp; Class Methods and Variables . Static vars are also called class variables because they belong to a class and not an instance | Static method belongs to a class rather than an instance of class | class methods are called on the class itself not a specific object | . ACCESS MODIFIERS: . Keywords to control visibility of methods and constructors in classes | Public means it can be accessed from anywhere | Private means only within the same class | protected means that it is accessed within the same package and outside with a child class | . class Data { // private variable private String name; } public class Main { public static void main(String[] main){ // create an object of Data Data d = new Data(); // access private variable and field from another class d.name = &quot;Hello&quot;; } } //error because private Data.main(null); . | d.name = &#34;Hello&#34;; name has private access in Data . class Animal { // protected method protected void display() { System.out.println(&quot;I am an animal&quot;); } } class Dog extends Animal { public static void main(String[] args) { // create an object of Dog class Dog dog = new Dog(); // access protected method dog.display(); } } . // public class public class Animal { // public variable public int legCount; // public method public void display() { System.out.println(&quot;I am an animal.&quot;); System.out.println(&quot;I have &quot; + legCount + &quot; legs.&quot;); } } // Main.java public class Main { public static void main( String[] args ) { // accessing the public class Animal animal = new Animal(); // accessing the public variable animal.legCount = 4; // accessing the public method animal.display(); } } . Main Method &amp; Tester Method . Main contains code to execute and call other methods, usually the entry point to execute Java program | Tester method evaluates code to see if it fulfills requirements | . Inheritance &amp; Subclasses . Method to create hierarchy between classes by inheriting from other classes | parent and child classes | extends extend a class to show its inherited and extends functionality | Subclass inherits all methods and fields from superclass, and constructor can be carried out from subclass | super refers to superclass or parent objects | . class Animal { // methods and fields } // use of extends keyword // to perform inheritance class Dog extends Animal { //dog subclass // methods and fields of Animal // methods and fields of Dog } . Overload &amp; Override . Overload happens when there are two methods with same name but different arguments or parameters | Method override happens when child class has the same method that is present in a parent class, overwrites base class method | . Abstract Class &amp; Method . Abstract class is a restricted class that cant be used to create objects and can only access if inherited from other class | method can only be used in abstract class and has no implementation | . // create an abstract class abstract class Language { // fields and methods } ... // try to create an object Language // throws an error Language obj = new Language(); . | ... illegal start of expression . abstract class Language { // abstract method abstract void method1(); // regular method void method2() { System.out.println(&quot;This is regular method&quot;); } } . Late Binding . Late binding is that compiler shouldn’t check arguments and no type checks on method call, if method names are mapped at runtime its late | . Polymorphism . Ability of class to provide different implementations of methods, such as overloading, overriding, late binding | . Big O notation . How long an algorithm takes to run | HashMap has O(1) which is same amount of time to execute | Binary Search has O(log N) which means it takes an additional step each time data doubles | Single and Nested loop is O(1) | . Write the complete StepTracker class, including the constructor and any required instance variables and methods. Your implementation must meet all specifications and conform to the example. . public class StepTracker { private int minStepsActive; //instance variable declarations private int activeDays; private int days; private int totalStep; public StepTracker(int minStepsActive) //constructors with default parameters { this.minStepsActive= minStepsActive; activeDays = 0; days = 0; totalSteps = 0; } //accessor method public int activeDays() { return activeDays; } //mutator method public void addDailySteps(int steps) { if(steps &gt;= minStepsActive) activeDays++; days++; totalSteps += steps; } //average steps public double averageSteps() //used because dividing { if(days==0) return = 0; return totalSteps / (double)days; } public static void main(String[] args) { StepTracker tr = new StepTracker; System.out.println(tr.activeDays()) tr.addDailySteps(9000); tr.addDailySteps(5000); System.out.println(tr.activeDays()); tr.addDailySteps(13000); //only active day because it holds at least 10000 steps System.out.println(tr.activeDays()); } } .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/lessonhw/fastpages/jupyter/2022/10/24/2019frq2-unit5.html",
            "relUrl": "/lessonhw/fastpages/jupyter/2022/10/24/2019frq2-unit5.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 2 HW - 2021 FRQ",
            "content": "No presentation . personal quiz 7/7 on using java objects | 5-7.5% of the test | . Declaration − A variable declaration with a variable name with an object type. . Instantiation − The &#39;new&#39; keyword is used to create the object. . Initialization − The &#39;new&#39; keyword is followed by a call to a constructor. This call initializes the new object. . MATH CLASS - abs creates an absolute value around the number, and random returns an int between 0 and 1 . part of java package, uses static methods that belong to the class and not object | math random returns random int or double in the given range | . import java.lang; public class Math{ public static void main(String[] args){ System.out.println(Math.abs(-20)); System.out.println(Math.abs(20)); //math absolute makes it all positive System.out.println(Math.random()); //math random returns random in range } } Math.main(null); . Concatentation . adding or joining data types together | String concatenation is a type where strings can added to each other to form full sentences | primitive concatenation | . Standard Methods . the toString() method used to get a String object representing a data type or element converted to a String | equals() is used to compare 2 strings and returns if the content of the strings are equal | hashCode() method computes the hash values of given input objects | . Wrapper Class . Each primitive has a corresponding wrapper class: boolean, byte, short, char, int, long, float, double | used for methods that support objects like conversion | converts from other data types to object | . 1a . Write the WordMatch method scoreGuess. To determine the score to be returned, scoreGuess finds the number of times that guess occurs as a substring of secret and then multiplies that number by the square of the length of guess. Occurrences of guess may overlap within secret. Assume that the length of guess is less than or equal to the length of secret and that guess is not an empty string. The following examples show declarations of a WordMatch object. The tables show the outcomes of some possible calls to the scoreGuess method. WordMatch game = new WordMatch(&quot;mississippi&quot;); . public class WordMatch { public int scoreGuess(String guess) //answer to 1a { int count = 0; //starts off the count of substring occurrences at 0 for (int i = 0; i &lt;= secret.length(); i++) { //assuming that length of guess is less than or equal to secret.length if (secret.substring(i, guess.length().equals(guess)); //checks if guess is within substring of secret count++; } //then increases the count } return count * guess.length() * guess.length(); //numbers of times guess is found within substring and multiplies it by square of guess } . 1b . Write the WordMatch method findBetterGuess, which returns the better guess of its two String parameters, guess1 and guess2. If the scoreGuess method returns different values for guess1 and guess2, then the guess with the higher score is returned. If the scoreGuess method returns the same value for guess1 and guess2, then the alphabetically greater guess is returned. The following example shows a declaration of a WordMatch object and the outcomes of some possible calls to the scoreGuess and findBetterGuess methods. . public class WordMatch { public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1)&gt;scoreGuess(guess2)) //if guess for guess1 is greater then guess1 is returned { return guess1; } if (scoreGuess(guess2)&gt;scoreGuess(guess1)) //otherwise guess2 is returned { return guess2; } } . I couldn&#39;t figure out how to get it to return the greater alphanumeric guess if the values for both were the same, so I searched it up and found out that you need to use an if(guess1.comparedTo(guess2)&gt;0), then you return guess1, otherwise you return guess 2. .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/lessonhw/2022/10/16/frq2021-objhw.html",
            "relUrl": "/fastpages/lessonhw/2022/10/16/frq2021-objhw.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Crime Prevention Quiz - Draft",
            "content": "Possible Questions . What are some possible reasons crimes may go unreported? | People are hesitant to call out of fear they will be identified by the potential criminal . | People take for granted that someone else has already contacted the police . | They worry about being embarrassed if their suspicions prove to be unfounded . | All of the above (correct) . | . What should you do in the case someone breaks into your house? | Charge at them and take care of it yourself . | Hide somewhere safe and call the police (correct) . | Give up your belongings and run from your house . | Don&#39;t do anything . | . Out of the following choices, which would be considered &quot;suspicious activity&quot;? | A vehicles moving slowly and without lights, or seemingly repetitive or suspicious . | Containing one or more suspicious people observed at an unusual hour. . | Vehicles being loaded with valuables in front of closed businesses or residences . | All of the above (correct) . | . What should you do if a gun is pointed at you and the criminal asks you to give up your belongings? | Run away in the other direction as fast as you can . | Give them your belongings and retreat a good distance away (correct) . | Adamantly refuse to listen to their demands . | Slowly back up at a slow pace and negotiate with the criminal . | . References . https://www.proprofs.com/quiz-school/quizshow.php?title=nzm3nti0cnp6&amp;q=4 . https://quizlet.com/36759508/crime-prevention-quiz-flash-cards/ . https://www.unodc.org/unodc/en/justice-and-prison-reform/CrimePrevention.html .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2022/10/02/crime-safety-quiz.html",
            "relUrl": "/2022/10/02/crime-safety-quiz.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Arrays and Images",
            "content": "Saving PNG to GIF . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main(String[] args){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;monalisa&quot;; String in = &quot;ghtop_images/&quot;; String out = &quot;ghtop_images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . Scaling Images and Converting to ASCII . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;ghtop_images/&quot;; // location of images private final String outDir = &quot;ghtop_images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;monalisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); } } Pics.main(null); . Original: 3299776 1470x1530 ghtop_images/monalisa.png Scaled: 470918 485x505 ghtop_images/tmp/monalisa.png . Grayscale Hacks . package _notebooks; import java.awt.Color; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.nio.file.Files; import javax.imageio.ImageIO; public class ColorScale extends ImageData { public ColorScale(String name, String color, String ext) { super(name, ext); this.colorFile = this.outDir + name + color + &quot;.png&quot;; } public ColorScale(String name, String color) { super(name, color); this.colorFile = this.outDir + name + color + &quot;.png&quot;; } @Override //child class method is over-writing its base class method. protected void scale(String color) { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; Color col = null; // Deletes previously named file if exists try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { e.printStackTrace(); } if (color.equals(&quot;Gray&quot;)){ for (int i = 0; i &lt; this.height; i++){ for (int j = 0; j &lt; this.width; j++){ Color col = new Color(img.getRGB(j,i)); img.setRGB(j, i, rgb); } } } if(color.equals(&quot;ASCII&quot;)){ final int XLENGTH = 1; final int YLENGTH = 2; for (int i = 0; i &lt; img.getHeight(); i += 4) { for (int j = 0; j &lt; img.getWidth(); j += 2) { double colorSum = 0; int counter = 0; for (int k = 0; k &lt; XLENGTH; k++) { for (int l = 0; l &lt; YLENGTH; l++) { if (k &lt; img.getWidth() &amp;&amp; l &lt; img.getHeight()) { counter++; col = new Color(img.getRGB(j + k, i + l)); } } } double average = colorSum / counter; try { asciiPrt.print(asciiChar(average)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { e.printStackTrace(); } } // changes the cake regular png into a grayscale version of the photo public static void main(String[] args) { ColorScale cake = new ColorScale(&quot;cake&quot;, &quot;png&quot;); BlueSunset.scale(&quot;Gray&quot;); } } . Original . Gray .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2022/10/02/arrays-and-images.html",
            "relUrl": "/2022/10/02/arrays-and-images.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "RapidAPI",
            "content": "Java and RapidAPI use case . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://world-crime-news1.p.rapidapi.com/origins&quot;)) //url of the api .header(&quot;X-RapidAPI-Key&quot;, &quot;db20d58282msh8ae390d360a0d8dp15f467jsnad3bdd095849&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;world-crime-news1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . {&#34;error&#34;:false,&#34;data&#34;:[{&#34;originId&#34;:&#34;thethaiger&#34;,&#34;name&#34;:&#34;Thethaiger News Crime&#34;,&#34;paginate&#34;:&#34;/page/&#34;},{&#34;originId&#34;:&#34;theportugalnews&#34;,&#34;name&#34;:&#34;The Portugal News Crime&#34;,&#34;paginate&#34;:false},{&#34;originId&#34;:&#34;indiatoday&#34;,&#34;name&#34;:&#34;India today News Crime&#34;,&#34;paginate&#34;:&#34;?page=&#34;},{&#34;originId&#34;:&#34;japantoday&#34;,&#34;name&#34;:&#34;Japan today News Crime&#34;,&#34;paginate&#34;:&#34;?page=&#34;},{&#34;originId&#34;:&#34;africanews&#34;,&#34;name&#34;:&#34;Africa News&#34;,&#34;paginate&#34;:false}]} . package com.nighthawk.spring_portfolio.mvc.covid; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/covid&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://world-crime-news1.p.rapidapi.com/origins&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;db20d58282msh8ae390d360a0d8dp15f467jsnad3bdd095849&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;world-crime-news1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . Questions . Benefits of using an API? | Some benefits are that less human effort is needed because the API will be managed by the computer | More efficient and better data values than a human could input | . Benefits of backend implementation? | Easier to use an API and less time spent | .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2022/10/02/api.html",
            "relUrl": "/2022/10/02/api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Javascript Learning",
            "content": "console.log(&quot;Hello! :)&quot;) . var msg = &quot;Hello! :)&quot;; console.log(msg); function logIt(output) { console.log(output); } logIt(msg); . A JavaScript variable is simply a name of storage location, and it must start with a letter, underscore, or dollar sign. You can declare JavaScript variables with var, let, or const. . function Person(name, grade, roles) { this.name = name; this.grade = grade; this.roles = roles; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { //this sets a function of the role this.role = role; } Person.prototype.toJSON = function() { const obj = {name: this.name, grade: this.grade, roles: this.roles, role: this.role}; const json = JSON.stringify(obj); return json; } // make mr mort as the csa teacher and an object var teacher = new Person(&quot;Mr Mortensen&quot;, &quot;csa teacher&quot;,&quot;csa teacher&quot;); logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].grade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].roles + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/learning/fastpages/2022/09/25/javascript.html",
            "relUrl": "/learning/fastpages/2022/09/25/javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Fibonacci",
            "content": "import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(10); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* Fibo is a parent class that has all the functions for the the loops. all it really does is tell the function how to create the sequence (init), how to put it in the list (setData), and how to retrieve a number/sequence (getNth, getNthSeq). then there&#39;s the main method that creates fib, which is an instance of the Fibo class */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Recursion Loop . public class FiboRecur extends Fibo { public FiboRecur() { this(10); // telescope to avoid code duplication, using default } public FiboRecur(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboRecur rFib = new FiboRecur(); rFib.print(); } // Recursion function, using int i as a counter protected void recur(long[] f, int i) { // Sets data using beginning value this.setData(f[0]); // Cretes new long f = new long[]{f[1], f[0] + f[1]}; // Adds to counter i++; if (i &lt; this.size) { // Recusion continues if size limit has not been reached this.recur(f, i); } } // Custom init using recursion loop instead protected void init() { this.name = &quot;Recursion&quot;; // Uses int i as a counter for recusion, also creates initial long[] int i = 0; long[] f = new long[] {0,1}; // input long and counter i into recursion function this.recur(f, i); } } FiboRecur.main(null) . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . For Loop . public class FiboFor extends Fibo { public FiboFor() { this(10); // telescope to avoid code duplication, using default } public FiboFor(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboRecur rFib = new FiboRecur(); rFib.print(); } // Custom init using for loop instead protected void init() { this.name = &quot;For&quot;; // creates initial long[] long[] f = new long[] {0,1}; // iterates through until reaches desired length for (int i = 0; i &lt; this.size; i++) { // sets data, then updates f this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; } } } FiboFor.main(null) . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . While Loop . public class FiboWhile extends Fibo { public FiboWhile() { this(10); // telescope to avoid code duplication, using default } public FiboWhile(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboWhile wFib = new FiboWhile(); wFib.print(); } // Custom init using while loop instead protected void init() { this.name = &quot;While Loop&quot;; int i = 0; // new long array with only 0 long[] f = new long[] {0,1}; //while i is less than the length desired while (i &lt; this.size) { // sets data first, then adds to f this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; // adds to counter i++; } } } FiboWhile.main(null) . Init method = While Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/learning/2022/09/25/fib.html",
            "relUrl": "/fastpages/learning/2022/09/25/fib.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "FRQ 1 - 2018",
            "content": "Part A . (a) Write the simulate method, which simulates the frog attempting to hop in a straight line to a goal from the frog&#39;s starting position of 0 within a maximum number of hops. The method returns true if the frog successfully reached the goal within the maximum number of hops; otherwise, the method returns false. The FrogSimulation class provides a method called hopDistance that returns an integer representing the distance (positive or negative) to be moved when the frog hops. A positive distance represents a move toward the goal. A negative distance represents a move away from the goal. The returned distance may vary from call to call. Each time the frog hops, its position is adjusted by the value returned by a call to the hopDistance method. The frog hops until one of the following conditions becomes true: • The frog has reached or passed the goal. • The frog has reached a negative position. • The frog has taken the maximum number of hops without reaching the goal . Intent: Simulate the distance traveled by a hopping frog +1 Calls hopDistance and uses returned distance to adjust (or represent) the frog’s position +1 Initializes and accumulates the frog’s position at most maxHops times (must be in context of a loop) +1 Determines if a distance representing multiple hops is at least goalDistance +1 Determines if a distance representing multiple hops is less than starting position +1 Returns true if goal ever reached, false if goal never reached or position ever less than starting position . public class FrogSimulation { public boolean simulate() { int distance = 0; for(int i=0; i&lt;maxHops; i++) { distance += hopDistance(); if(distance&lt;goalDistance){ return false; } if(distance&gt;=goalDistance){ return true; } } } return false; } . Part B . Complete method simulate below. You must use hopDistance appropriately to receive full credit. . Simulates a frog attempting to reach the goal as described in part (a). | Returns true if the frog successfully reached or passed the goal during the simulation; | false otherwise. | . public class FrogSimulation { public boolean simulate() { int distance = 0; int goal = goalDistance; for(int i=0; i&lt;maxHops; i++) { distance += hopDistance(); if(distance&gt;=goalDistance){ return true; } else { return false; } } .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/jupyter/learning/2022/09/19/frq1.html",
            "relUrl": "/jupyter/learning/2022/09/19/frq1.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "2D Arrays - Monkeys and Ants",
            "content": "class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt; 0; i--){ //loops through 2D array length backwards System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int col = 0; col &lt; monkeys[0].length; col++) { / for (int row = 0; row &lt; i; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; t&quot;); } //this is new line between separate parts System.out.println(); //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Ants Marching up the Hill array . class AntLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] ants; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public AntLoop() { //Storing Data in 2D arrays ants = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //ant 0 { &quot; - - &quot;, //[0][0] eyes &quot; &gt;v&lt; &quot;, //[0][1] chin &quot; &gt;O&lt; &quot;, //[0][2] body &quot; &gt;O&lt; &quot; //[0][3] legs }, //ant 1 { &quot; | | &quot;, //[1][0] &quot; 0 0 &quot;, &quot; :X: &quot;, &quot; :X: &quot; }, //ant 2 { &quot; * * &quot;, //[2][0] &quot; &#39;-0-&#39; &quot;, &quot; --0-- &quot;, &quot; .-0-. &quot; }, //ant 3 { &quot; - - &quot;, //[3][0] &quot; -o- &quot;, &quot; - - &quot;, &quot; -o- &quot; }, //ant 4 { &quot; } { &quot;, //[4][0] &quot; &#39;--&#39; &quot;, //[4][1] &quot; - &quot;, //[4][2] &quot; .--. &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Ants Marching up a Hill&quot;); // monkeys (non-primitive) defined in constructor knows its length int antCount = 0; for (int i = 0; i&lt;=5; i++) //loops through 2D array length backwards { //this print statement shows current count of ants // concatenation (+) of the loop variable and string to form a countdown message System.out.println(&quot;The ants go marching &quot;+(i)+&quot; by &quot; + (i) + &quot;, hurrah hurrah&quot;); for (int row = 0; row &lt; antCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; ants[row].length; col++) { // prints specific part of the monkey from the column System.out.print(ants[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing antCount variable by 1 antCount ++; } //out of all the loops, prints finishing messages System.out.println(&quot;And they all go marching down into the ground&quot;); System.out.println(&quot; Fin &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new AntLoop().printPoem(); //a new ant list and output in one step } } AntLoop.main(null); . Ants Marching up a Hill The ants go marching 0 by 0, hurrah hurrah The ants go marching 1 by 1, hurrah hurrah - - &gt;v&lt; &gt;O&lt; &gt;O&lt; The ants go marching 2 by 2, hurrah hurrah - - &gt;v&lt; &gt;O&lt; &gt;O&lt; | | 0 0 :X: :X: The ants go marching 3 by 3, hurrah hurrah - - &gt;v&lt; &gt;O&lt; &gt;O&lt; | | 0 0 :X: :X: * * &#39;-0-&#39; --0-- .-0-. The ants go marching 4 by 4, hurrah hurrah - - &gt;v&lt; &gt;O&lt; &gt;O&lt; | | 0 0 :X: :X: * * &#39;-0-&#39; --0-- .-0-. - - -o- - - -o- The ants go marching 5 by 5, hurrah hurrah - - &gt;v&lt; &gt;O&lt; &gt;O&lt; | | 0 0 :X: :X: * * &#39;-0-&#39; --0-- .-0-. - - -o- - - -o- } { &#39;--&#39; - .--. And they all go marching down into the ground Fin .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/learning/2022/09/19/array-monkey.html",
            "relUrl": "/fastpages/learning/2022/09/19/array-monkey.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Boolean and If Statements Lesson",
            "content": "If Statements . If statements are run if the function is true to a particular condition. For a code to execute, the condition must be true. . int x = 20; // the integer given in the variable is 20 if (x &gt; 18) { //since this condition is true, the statement will print System.out.println(x+&quot; is greater than 18.&quot;); } . 20 is greater than 18. . If-Else Statement . If-else statements are run if one condition is met. If that condition is not met however, it will perform another specified action under the else part of the conditional. . int x = 8; // the integer given in the variable is 20 if (x &gt; 18) { //since this condition is true, the statement will print System.out.println(x+&quot; is greater than 18.&quot;); } else { //this is what will print if the &quot;if&quot; statement is false System.out.println(x+ &quot; is less than 18.&quot;); } . 8 is less than 18. . If-Elseif-Else . This function runs if the first condition is met, and if that condition is not true, it will check if the next else-if condition is met. This can be done any number of times, and if those conditions are all not met, the else is run. . int x = 8; // the integer given in the variable is 20 if (x &gt; 18) { //since this condition is true, the statement will print System.out.println(x+&quot; is greater than 18.&quot;); } else if (x&gt;9) { //this is what will print if the &quot;if&quot; statement is false System.out.println(x+ &quot; is greater than 9.&quot;); } else{ System.out.println(x+&quot; is smaller than 9.&quot;); //what will print if nothing above is true } . 8 is smaller than 9. . Switch Case . A switch case is when the if-elseif-else condition is repeated a numerous amount of times, with more elseif statements that checks different conditions. . int x = 13; // the integer given in the variable is 20 if (x &gt; 18) { //since this condition is true, the statement will print System.out.println(x+&quot; is greater than 18.&quot;); } else if (x&gt;16) { //this is what will print if the &quot;if&quot; statement is false System.out.println(x+ &quot; is greater than 16.&quot;); } else if (x&gt;14) { System.out.println(x+&quot; is greater than 14&quot;); } else if (x&gt;12) { System.out.println(x+&quot; is greater than 12&quot;); } else{ System.out.println(x+&quot; is smaller than 12.&quot;); //what will print if nothing above is true } . 13 is greater than 12 . You can write this as a switch case. . int x = 13; // the integer given in the variable is 20 String output; switch (x) { case 10: output = x + &quot; is equal to 10&quot;; break; case 11: output = x + &quot; is equal to 11&quot;; break; case 12: output = x + &quot; is equal to 12&quot;; break; case 13: output = x + &quot; is equal to 13&quot;; break; } System.out.println(output); . 13 is equal to 13 . De Morgans Law . This law says that &quot;the complement of two union sets is the intersection of their complements&quot;. It means that saying &quot;not and &quot; is the same as saying those statements separately. . boolean vanilla = true; boolean chocolate = true; if (!(chocolate &amp;&amp; vanilla)){ System.out.println(&quot;I do not like chocolate or vanilla&quot;); } else{ System.out.println(&quot;I like chocolate and vanilla&quot;); } . I like chocolate and vanilla . if (!chocolate || !vanilla){ System.out.println(&quot;I do not like chocolate or vanilla&quot;); } else{ System.out.println(&quot;I like chocolate and vanilla&quot;); } . I like chocolate and vanilla . Both the statements have the same output. .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/learning/2022/09/11/if-and-else.html",
            "relUrl": "/fastpages/learning/2022/09/11/if-and-else.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Psychology and the Good Life",
            "content": "Note of Gratitude - Vidhi . Hi Vidhi! I&#39;m very thankful to you for helping me with CSA. Since I didn&#39;t take CSP last year, I was feeling a bit lost when the class started. Now, I feel more confident, especially because I can count on you to help me. Hopefully one day I can help you back :) Thanks for being a great friend too (and a great meme). . -Riya . Note of Gratitude - My Sister . I am really grateful to my sister, because she believes in me no matter what I&#39;m trying to accomplish. If I mess up, she says &quot;you got this, try again&quot; and if I succeed, she tells me I did a great job. She may be younger than me, but I will be always grateful for her support and will give her that support back when she needs it. . -Riya . Goals for Personal Life . Don&#39;t stress too much | Get more sleep | Do the things you love | Work hard and achieve | . Goals for Academic Life . Try and excel in your classes | Don&#39;t be afraid to ask questions | Do your best | . Specific Goals for School . Study for Calc BC tests (they&#39;re hard) | Don&#39;t sleep too late because of procrastination | Study for physics test coming up | Practice for the next apel on demand | Work on forehand and backhand for tennis | Engage at robotics and other clubs | . Yale Video . What I learned from this video is that: . You shouldn&#39;t compare yourself to other people, because that just lowers your sense of self and esteem | Don&#39;t stress out and focus on the good things, not the bad | If you find yourself procrastinating, find interest in and have fun with the work you&#39;re doing | Enjoy the things you do in life instead of worrying | .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/human/fastpages/2022/09/11/blog-of-grat.html",
            "relUrl": "/human/fastpages/2022/09/11/blog-of-grat.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. // these are objects import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers // java style to import library double mass; double accel; double Force; double ac; double m; double m1; double m2; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // final = not going to change, static means element is not changing (not part of the object) // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Vidhi and Riya&#39;s Temp Convertor&quot;); System.out.println(&quot;2 - Lily&#39;s Average Calculator&quot;); System.out.println(&quot;3 - Modulus Calculator&quot;); System.out.println(&quot;4 - F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye! Thanks for checking this out :D&quot;); quit = true; break; case 1: Scanner input3; //we used a wrapper class to introduce our program to the user. String aString = &quot;This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class.&quot;; System.out.println(aString); //we used the string to greet the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your name as a string: &quot;); String name = input3.nextLine(); System.out.println(&quot;Hello &quot; + name ); input3.close(); //the integer is used to get the age of the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your age as an integer: &quot;); String age = input3.nextLine(); System.out.println(&quot;You are &quot; + age + &quot; years old.&quot; ); input3.close(); //boolean is used to get a true or false answer about whether the user is in AP Chemistry input3 = new Scanner(System.in); System.out.println(&quot;Are you in AP Chemistry? Enter your answer as a Boolean: &quot;); String chem = input3.nextLine(); System.out.println(&quot;Your answer: &quot; + chem); input3.close(); //double is used to get a number from the user and convert it using arithmetic expression input3 = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input3.nextDouble(); double kelvin = (celsius + 273.0); System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input3.close(); break; case 2: double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); } System.out.println(&quot;Mean: &quot; + mean); break; case 3: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulus calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); m1 = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); m2 = mod2; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulus Calculator&quot;); double result = m1%m2; System.out.print(m1 + &quot;mod&quot; + m2 + &#39;=&#39; + result); break; case 4: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input2; // primitive int input2 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input2.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); // primitive int input2 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input2.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Vidhi and Riya&#39;s Temp Convertor 2 - Lily&#39;s Average Calculator 3 - Modulus Calculator 4 - F=ma calculator 0 - Quit - 1: This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class. Enter your name as a string: Hello Riya Enter your age as an integer: You are 16 years old. Are you in AP Chemistry? Enter your answer as a Boolean: Your answer: true Enter a degree in Celsius as a double: 34.0 degree Celsius is equal to 307.0 in Kelvin 2: Enter numbers, type &#39;end&#39; to finish Number: 3 Number: 4 Number: 81 Number: 43 Number: 83 Number: 94 Number: 1 Number: 3 Number: end Show detailed info? y/n y Sum: 312.0 Count: 8 Mean: 39.0 3: Modulus calculator Enter your first number:34.0 Enter the second number: 5.0 Modulus Calculator 34.0mod5.0=4.0 4: F=ma calculator Enter the mass: 65.0 Enter the accel: 0.1 Force calculator 65.0*0.1=6.5 0: Goodbye! Thanks for checking this out :D .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/jupyter/tags/2022/09/04/menu.html",
            "relUrl": "/fastpages/jupyter/tags/2022/09/04/menu.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Python Jupyter Notebook",
            "content": "print(&quot;Hello World&quot;) . Hello World .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2022/08/28/python-notebook.html",
            "relUrl": "/2022/08/28/python-notebook.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Primitives - Temperature Converter",
            "content": "import java.util.Scanner; public class CelciustoKelvin { public static void main (String[] args) { Scanner input; //use of wrapper class String aString = &quot;This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class.&quot;; System.out.println(aString); //we used the string to greet the user input = new Scanner(System.in); System.out.println(&quot;Enter your name as a string: &quot;); String name = input.nextLine(); System.out.println(&quot;Hello &quot; + name ); input.close(); //the integer is used to get the age of the user input = new Scanner(System.in); System.out.println(&quot;Enter your age as an integer: &quot;); String age = input.nextLine(); System.out.println(&quot;You are &quot; + age + &quot; years old.&quot; ); input.close(); //boolean is used to get a true or false answer about whether the user is in AP Chem input = new Scanner(System.in); System.out.println(&quot;Are you in AP Chemistry? Enter your answer as a Boolean: &quot;); String chem = input.nextLine(); System.out.println(&quot;Your answer: &quot; + chem); input.close(); //double is used to get a number from the user and convert it using arithmetic expression input = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input.nextDouble(); double kelvin = (celsius + 273.0); System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input.close(); } } CelciustoKelvin.main(null); . This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class. Enter your name as a string: Hello Riya Enter your age as an integer: You are 16 years old. Are you in AP Chemistry? Enter your answer as a Boolean: Your answer: true Enter a degree in Celsius as a double: 12.34 degree Celsius is equal to 285.34 in Kelvin .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2022/08/28/primitivess.html",
            "relUrl": "/2022/08/28/primitivess.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "First Post",
            "content": "",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2022/08/28/primitives.html",
            "relUrl": "/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Java Jupyter Notebook",
            "content": "System.out.println(&quot;Hello World&quot;); . Hello World .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2022/08/28/java-nb.html",
            "relUrl": "/2022/08/28/java-nb.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Bash",
            "content": "jupyter kernelspec list . Available kernels: bash /home/riyapatil/.local/share/jupyter/kernels/bash java /home/riyapatil/.local/share/jupyter/kernels/java javascript /home/riyapatil/.local/share/jupyter/kernels/javascript python3 /home/riyapatil/.local/share/jupyter/kernels/python3 . . python --version conda --version java --version javac --version . Python 3.9.12 conda 4.13.0004l openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu122.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu122.04, mixed mode, sharing) javac 11.0.1604l . . conda list . # packages in environment at /home/riyapatil/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . . conda list | grep &quot;jupyter&quot; . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/2022/08/28/bash-checks.html",
            "relUrl": "/2022/08/28/bash-checks.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Menu Hacks",
            "content": "Defining a Class Classes are used to create objects and to define object data types and methods. Classes are defined when you have an object that you are going to program. . public class Menu //definition of a class called Menu used for program . Calling a method An object is calling a method when the code is trying to get the object to complete an action . int choice = sc.nextInt(); // calling a method from scanner //scans the next input of data as an integer . Mutating Data An object is mutating data when it takes the original input of data and mutates it, returning it as different data . input3 = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input3.nextDouble(); double kelvin = (celsius + 273.0); //mutation is taking double input and using arithmetic to mutate it System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input3.close(); . Console, GUI, Code.org Differences . Console:inputs and outputs seen as code, not visuals* GUI: Uses visuals and interactive as compared to consoles | Code.org: easy to understand learning platform, learned about extends, inheritance, classes, and methods | .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/jupyter/2022/05/09/menu-hacks.html",
            "relUrl": "/fastpages/jupyter/2022/05/09/menu-hacks.html",
            "date": " • May 9, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Code.org Takeaways",
            "content": "Creating a New Object Instantiating a new object --&gt; creating a new Painter object . //instantiates the Painter object by creating a new object Painter myPainter = new Painter(); . Using Objects Object calls the method and runs the code . //calls method of making Painter move or pick up paint myPainter.moveSouth(); . Extends Subclass extends Superclass Class is inherited from another class (ex:Taco class is inherited from Food class) . import org.code.neighborhood.Painter; //PainterPlus is a subclass of Painter public class PainterPlus extends Painter { public PainterPlus() { super(); // Calls superclass } //action done by class public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } } .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/fastpages/jupyter/2022/05/09/code-dot-org.html",
            "relUrl": "/fastpages/jupyter/2022/05/09/code-dot-org.html",
            "date": " • May 9, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post42": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown file. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://riya-patil.github.io/Riya-Patil-APCSA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Riya",
          "content": "Hi, I’m a junior interested in science and math! Some of my hobbies include drawing, writing, and reading! .",
          "url": "https://riya-patil.github.io/Riya-Patil-APCSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://riya-patil.github.io/Riya-Patil-APCSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}